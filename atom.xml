<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Messay</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://messay.me/"/>
  <updated>2020-05-25T13:04:07.757Z</updated>
  <id>http://messay.me/</id>
  
  <author>
    <name>Messay</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Macbook pro 2015升级硬盘+开机黑屏故障处理</title>
    <link href="http://messay.me/2020/05/25/Macbook-pro-2015%E5%8D%87%E7%BA%A7%E7%A1%AC%E7%9B%98-%E5%BC%80%E6%9C%BA%E9%BB%91%E5%B1%8F%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/"/>
    <id>http://messay.me/2020/05/25/Macbook-pro-2015升级硬盘-开机黑屏故障处理/</id>
    <published>2020-05-25T12:57:26.000Z</published>
    <updated>2020-05-25T13:04:07.757Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最近买了一台二手的丐版macbook-pro-2015款-13寸，很是好用。美中不足的是硬盘只有128G，故研究了一下升级ssd的过程。升级过程比较简单，此文主要说的是一些升级过程中遇到的问题以及解决方法。"><a href="#最近买了一台二手的丐版macbook-pro-2015款-13寸，很是好用。美中不足的是硬盘只有128G，故研究了一下升级ssd的过程。升级过程比较简单，此文主要说的是一些升级过程中遇到的问题以及解决方法。" class="headerlink" title="最近买了一台二手的丐版macbook pro 2015款 13寸，很是好用。美中不足的是硬盘只有128G，故研究了一下升级ssd的过程。升级过程比较简单，此文主要说的是一些升级过程中遇到的问题以及解决方法。"></a>最近买了一台二手的丐版macbook pro 2015款 13寸，很是好用。美中不足的是硬盘只有128G，故研究了一下升级ssd的过程。升级过程比较简单，此文主要说的是一些升级过程中遇到的问题以及解决方法。</h4><h4 id="一-升级过程问题："><a href="#一-升级过程问题：" class="headerlink" title="一. 升级过程问题："></a>一. 升级过程问题：</h4><ul><li>升级硬盘安装过程非常简单，网上已有大量的博文介绍，在此不在多写。我使用的是经过大量网友验证的 <code>Intel 760p</code>，确实很稳；</li><li><p>拆机过程中，强烈建议将电池连接断开，防止因带电操作，造成硬件损坏。电池是用一个卡扣连在主板上的，稍微向上用点力就可以扣下来。此处盗用一个图：</p><p><img src="https://i.loli.net/2020/05/25/YNFheC9K3BRygEw.jpg" alt="image-20191124185433480.jpg"></p></li><li><p>特别需要注意的是MacOS仅在10.13版本，也就是 <code>High Sierra</code> 才开始原生支持nvme驱动。这个版本之前的MacOS版本都是不支持nvme驱动的。故建议在安装系最低也要安装到10.13，建议安装 <code>10.14（Mojave）</code> 版本；</p></li><li><p>在装好ssd，重新恢复系统的时候，特别注意的是要使用装有10.13+版本的U盘来启动。一般来说Macbook 2015初始的系统，都是10.13之前的系统，如果使用网络恢复模式，是无法在磁盘管理中找到nvme的硬盘的，我就碰到了这个问题。后面在更换使用10.14版本的U盘启动才可以识别到新的nvme硬盘。U盘制作方法可参考：<a href="https://support.apple.com/zh-cn/HT201372" target="_blank" rel="noopener">如何创建可引导的 macOS 安装器</a></p></li><li><p>如果安装完成能正常启动，没有其他问题，那么到此，硬盘升级就完成。</p></li></ul><a id="more"></a><h4 id="二、开机黑屏的问题："><a href="#二、开机黑屏的问题：" class="headerlink" title="二、开机黑屏的问题："></a>二、开机黑屏的问题：</h4><ul><li><p>上面说到，我在第一次装好硬盘，开机启动的时候，是用网络恢复模式启动了，结果读取不到新的nvme硬盘。然后我把机器关机之后，重新用U盘启动，居然开机黑屏。具体症状为：</p><ol><li>键盘灯正常亮；</li><li>开机有“dang”的一声响；</li><li>A面Logo灯亮</li><li>屏幕黑屏</li></ol></li><li><p>在尝试重置 <code>NVRAM+SMC</code> 之后，仍然没有任何效果。外接显示器在开机的时候按住 <code>D</code>，进入自检模式后，提示 <code>显示器可能有问题</code>，错误代码是 <code>VFD001</code>，此处有图：</p><p><img src="https://i.loli.net/2020/05/25/TYztryHPRmVEwGK.jpg" alt="1590404195764.jpg"></p></li><li><p>看到显示器出问题，有点慌。但是我在拆机的时候，特别小心，就怕拆机把硬件拆出问题。在搜索了一些故障处理博文后，看到有不少人遇到了这个问题。根据这个威锋论坛的故障处理 <a href="https://m.feng.com/detail/post/10971157" target="_blank" rel="noopener">自己动手丰衣足食，修理MacBook Pro 2015版屏幕，省了3000+软妹币</a>和这个博文 <a href="https://www.insidemylaptop.com/13-macbook-pro-retina-fixing-no-video-issue-by-replacing-display-cable/" target="_blank" rel="noopener">13″ MacBook Pro Retina – fixing no video issue by replacing display cable</a>。基本可以断定是触发了 <code>Mac的保护机制</code>，导致了开机黑屏。关于 <code>Mac的保护机制</code>，网上并没有相关的资料，并不清楚触发的原理。</p></li><li><p>处理方法非常简单，按照上面两篇文章的方法，将主板上的电池断开连接，在将屏幕排线断开连接。等待大概2分钟后，在将屏幕排线和电池都连接好，重新开机。果然一切正常，顺利开机进入系统。此处当然也有图：</p><p>  <img src="https://i.loli.net/2020/05/25/VWrTqtehZdvxaDm.jpg" alt="IMG_20200523_183801.jpg"></p></li></ul><h4 id="三、结语"><a href="#三、结语" class="headerlink" title="三、结语"></a>三、结语</h4><ul><li>至此，升级硬盘和开机黑屏全部处理完成。特别提醒的是，拆机的时候请特别小心，没有大力出奇迹。如果你没有把握请千万不要尝试。</li></ul><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li><a href="https://chenson.cc/2019/11/23/2015-MacBookPro-SSD%E7%A1%AC%E7%9B%98%E6%9B%B4%E6%8D%A2/" target="_blank" rel="noopener">2015 MacBookPro SSD硬盘更换</a></li><li><a href="https://tnext.org/3127.html" target="_blank" rel="noopener">MacBook Pro (Retina, 13-inch, Early 2015)款升级Intel 760P SSD记录</a></li><li><a href="https://support.apple.com/zh-cn/HT201372" target="_blank" rel="noopener">如何创建可引导的 macOS 安装器</a></li><li><a href="https://support.apple.com/zh-cn/HT204267" target="_blank" rel="noopener">如果 Mac 无法开机的解决方法</a></li><li><a href="https://www.feng.com/post/10971157" target="_blank" rel="noopener">自己动手丰衣足食，修理MacBook Pro 2015版屏幕，省了3000+软妹币</a></li><li><a href="https://www.insidemylaptop.com/13-macbook-pro-retina-fixing-no-video-issue-by-replacing-display-cable/" target="_blank" rel="noopener">13″ MacBook Pro Retina – fixing no video issue by replacing display cable</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;最近买了一台二手的丐版macbook-pro-2015款-13寸，很是好用。美中不足的是硬盘只有128G，故研究了一下升级ssd的过程。升级过程比较简单，此文主要说的是一些升级过程中遇到的问题以及解决方法。&quot;&gt;&lt;a href=&quot;#最近买了一台二手的丐版macbook-pro-2015款-13寸，很是好用。美中不足的是硬盘只有128G，故研究了一下升级ssd的过程。升级过程比较简单，此文主要说的是一些升级过程中遇到的问题以及解决方法。&quot; class=&quot;headerlink&quot; title=&quot;最近买了一台二手的丐版macbook pro 2015款 13寸，很是好用。美中不足的是硬盘只有128G，故研究了一下升级ssd的过程。升级过程比较简单，此文主要说的是一些升级过程中遇到的问题以及解决方法。&quot;&gt;&lt;/a&gt;最近买了一台二手的丐版macbook pro 2015款 13寸，很是好用。美中不足的是硬盘只有128G，故研究了一下升级ssd的过程。升级过程比较简单，此文主要说的是一些升级过程中遇到的问题以及解决方法。&lt;/h4&gt;&lt;h4 id=&quot;一-升级过程问题：&quot;&gt;&lt;a href=&quot;#一-升级过程问题：&quot; class=&quot;headerlink&quot; title=&quot;一. 升级过程问题：&quot;&gt;&lt;/a&gt;一. 升级过程问题：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;升级硬盘安装过程非常简单，网上已有大量的博文介绍，在此不在多写。我使用的是经过大量网友验证的 &lt;code&gt;Intel 760p&lt;/code&gt;，确实很稳；&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拆机过程中，强烈建议将电池连接断开，防止因带电操作，造成硬件损坏。电池是用一个卡扣连在主板上的，稍微向上用点力就可以扣下来。此处盗用一个图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/05/25/YNFheC9K3BRygEw.jpg&quot; alt=&quot;image-20191124185433480.jpg&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;特别需要注意的是MacOS仅在10.13版本，也就是 &lt;code&gt;High Sierra&lt;/code&gt; 才开始原生支持nvme驱动。这个版本之前的MacOS版本都是不支持nvme驱动的。故建议在安装系最低也要安装到10.13，建议安装 &lt;code&gt;10.14（Mojave）&lt;/code&gt; 版本；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在装好ssd，重新恢复系统的时候，特别注意的是要使用装有10.13+版本的U盘来启动。一般来说Macbook 2015初始的系统，都是10.13之前的系统，如果使用网络恢复模式，是无法在磁盘管理中找到nvme的硬盘的，我就碰到了这个问题。后面在更换使用10.14版本的U盘启动才可以识别到新的nvme硬盘。U盘制作方法可参考：&lt;a href=&quot;https://support.apple.com/zh-cn/HT201372&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;如何创建可引导的 macOS 安装器
&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果安装完成能正常启动，没有其他问题，那么到此，硬盘升级就完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Prometheus联邦集群+Alertmanager电话报警配置示例说明</title>
    <link href="http://messay.me/2019/08/30/Prometheus%E8%81%94%E9%82%A6%E9%9B%86%E7%BE%A4-Alertmanager%E7%94%B5%E8%AF%9D%E6%8A%A5%E8%AD%A6%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B%E8%AF%B4%E6%98%8E/"/>
    <id>http://messay.me/2019/08/30/Prometheus联邦集群-Alertmanager电话报警配置示例说明/</id>
    <published>2019-08-30T14:42:06.000Z</published>
    <updated>2020-05-17T14:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="目前公司有两个业务线，所以搭建了两套Kubernetes集群用来部署不同业务，每套集群内部都是用容器部署了一套Prometheus监控自身的业务。基于数据易于分析和预警及时的考虑，故整合两个集群的Prometheus数据到外层的一个Prometheus里，并增加高级别异常电话告警。联邦集群的原理这里不在赘述，各组件具体配置示例如下："><a href="#目前公司有两个业务线，所以搭建了两套Kubernetes集群用来部署不同业务，每套集群内部都是用容器部署了一套Prometheus监控自身的业务。基于数据易于分析和预警及时的考虑，故整合两个集群的Prometheus数据到外层的一个Prometheus里，并增加高级别异常电话告警。联邦集群的原理这里不在赘述，各组件具体配置示例如下：" class="headerlink" title="目前公司有两个业务线，所以搭建了两套Kubernetes集群用来部署不同业务，每套集群内部都是用容器部署了一套Prometheus监控自身的业务。基于数据易于分析和预警及时的考虑，故整合两个集群的Prometheus数据到外层的一个Prometheus里，并增加高级别异常电话告警。联邦集群的原理这里不在赘述，各组件具体配置示例如下："></a>目前公司有两个业务线，所以搭建了两套<code>Kubernetes</code>集群用来部署不同业务，每套集群内部都是用容器部署了一套<code>Prometheus</code>监控自身的业务。基于数据易于分析和预警及时的考虑，故整合两个集群的<code>Prometheus</code>数据到外层的一个<code>Prometheus</code>里，并增加高级别异常电话告警。联邦集群的原理这里不在赘述，各组件具体配置示例如下：</h4><a id="more"></a><h4 id="一、外层聚合Prometheus-二进制形式-配置示例"><a href="#一、外层聚合Prometheus-二进制形式-配置示例" class="headerlink" title="一、外层聚合Prometheus(二进制形式)配置示例:"></a>一、外层聚合<code>Prometheus</code>(二进制形式)配置示例:</h4><ul><li><code>Prometheus</code>配置示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"># file: prometheus.yml</span><br><span class="line"></span><br><span class="line"># my global config</span><br><span class="line">global:</span><br><span class="line">  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line"></span><br><span class="line"># Alertmanager configuration</span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets: [&quot;localhost:9093&quot;]</span><br><span class="line"></span><br><span class="line"># Load rules once and periodically evaluate them according to the global &apos;evaluation_interval&apos;.</span><br><span class="line">rule_files:                               # 相关rule此处请根据需要自行配置</span><br><span class="line">  - &quot;/opt/prometheus/rules/*.rules&quot;</span><br><span class="line">  - &quot;/opt/prometheus/rules/*.yaml&quot;</span><br><span class="line"></span><br><span class="line"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class="line"># Here it&apos;s Prometheus itself.</span><br><span class="line">scrape_configs:</span><br><span class="line"></span><br><span class="line">  #   static_configs:</span><br><span class="line">  #   - targets: [&apos;localhost:9090&apos;]</span><br><span class="line">  - job_name: &apos;federate&apos;</span><br><span class="line">  #  scrape_interval: 15s</span><br><span class="line"></span><br><span class="line">    honor_labels: true</span><br><span class="line">    metrics_path: &apos;/federate&apos;</span><br><span class="line"></span><br><span class="line">    params:                               # 此处注意，job需要和收集端的job名称一致</span><br><span class="line">      &apos;match[]&apos;:</span><br><span class="line">        - &apos;&#123;job=&quot;prometheus&quot;&#125;&apos;    </span><br><span class="line">        - &apos;&#123;job=&quot;etcd&quot;&#125;&apos;</span><br><span class="line">        - &apos;&#123;job=~&quot;kubernetes-.*&quot;&#125;&apos;</span><br><span class="line">        - &apos;&#123;job=~&quot;kube-.*&quot;&#125;&apos;</span><br><span class="line">        # - &apos;&#123;job=~&quot;kubelet.*&quot;&#125;&apos;</span><br><span class="line"></span><br><span class="line">    static_configs:                      # 需收集的地址 </span><br><span class="line">      - targets:</span><br><span class="line">        - &apos;192.168.7.74:9090&apos;</span><br><span class="line">        - &apos;192.168.7.47:9090&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># file: prometheus.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Prometheus</span><br><span class="line">Documentation=https://prometheus.io/</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/opt/prometheus/prometheus \</span><br><span class="line">  --config.file=/opt/prometheus/prometheus.yml \    </span><br><span class="line">  --storage.tsdb.path=/opt/prometheus/data \     </span><br><span class="line">  --storage.tsdb.retention=168h \             # 数据持久化时间</span><br><span class="line">  --web.enable-lifecycle                      # 启用配置热更新</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li><code>alertmanager</code>配置示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># file: alertmanager.yml</span><br><span class="line"></span><br><span class="line">global:</span><br><span class="line">  smtp_smarthost: &quot;smtp.server.org:25&quot;</span><br><span class="line">  smtp_from: &quot;k8salert@server.org&quot;</span><br><span class="line">  smtp_auth_username: &quot;k8salert@server.org&quot;</span><br><span class="line">  smtp_auth_password: &quot;password&quot;</span><br><span class="line">  smtp_require_tls: false</span><br><span class="line">templates:</span><br><span class="line">  - &apos;/opt/alertmanager/templates/*.tmpl&apos;                     </span><br><span class="line">route:</span><br><span class="line">  receiver: &apos;email_alert&apos;</span><br><span class="line">  group_by: [&apos;alertname&apos;, &apos;instance&apos;, &apos;service&apos;, &apos;severity&apos;] # 聚合报警类别</span><br><span class="line">  group_wait: 10s                                            # 聚合等待时间,超过这个时间开始发送报警</span><br><span class="line">  group_interval: 3m                                         # 已经存在的group等待group_interval这个时间段看报警问题是否解决</span><br><span class="line">  repeat_interval: 5m                                        # 再次报警间隔</span><br><span class="line">  routes:</span><br><span class="line">  - match:                                                   # 报警媒介匹配规则</span><br><span class="line">      severity: critical                                     # 匹配label</span><br><span class="line">    receiver: &apos;multi_alert&apos;</span><br><span class="line">receivers:                                                   # 报警发送媒介</span><br><span class="line">  - name: &apos;email_alert&apos;                                      # email</span><br><span class="line">    email_configs:</span><br><span class="line">    - to: &apos;aaa@server.com&apos;</span><br><span class="line">      send_resolved: true</span><br><span class="line">  - name: &apos;multi_alert&apos;                                      # 多重媒介</span><br><span class="line">    webhook_configs:</span><br><span class="line">    - send_resolved: true                                    # 电话报警</span><br><span class="line">      url: &apos;http://192.168.7.105:8765/phoneWarn/callUp/v1/prome&apos;</span><br><span class="line">    email_configs:                                           # email</span><br><span class="line">    - to: &apos;aaa@server.com&apos;</span><br><span class="line">      send_resolved: true</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line"># file: alertmanager.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Prometheus Alertmanager Service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/opt/alertmanager/alertmanager \</span><br><span class="line">    --config.file /opt/alertmanager/alertmanager.yml \</span><br><span class="line">    --storage.path /opt/alertmanager/data</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="二、电话报警配置说明示例"><a href="#二、电话报警配置说明示例" class="headerlink" title="二、电话报警配置说明示例"></a>二、电话报警配置说明示例</h4><ul><li>电话报警原理：电话报警其实就是把<code>prometheus</code>发送给<code>alertmanager</code>的报警信息重新封装，推给已有的电话报警接口里(此处我们公司用的是封装的阿里云的电话接口)</li><li><code>prometheus</code>发送原始信息示例(需二次封装)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;status&quot;: &quot;firing&quot;,</span><br><span class="line">    &quot;groupLabels&quot;: &#123;</span><br><span class="line">        &quot;alertname&quot;: &quot;pod_container_restart&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;groupKey&quot;: &quot;&#123;&#125;:&#123;alertname=\&quot;pod_container_restart\&quot;&#125;&quot;,</span><br><span class="line">    &quot;commonAnnotations&quot;: &#123;</span><br><span class="line">        &quot;description&quot;: &quot;Pod coredns-6fc7b84544-58ff6 in namespace kube-system has a container resstart for more than 5 times&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;alerts&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;status&quot;: &quot;firing&quot;,</span><br><span class="line">            &quot;labels&quot;: &#123;</span><br><span class="line">                &quot;k8s_app&quot;: &quot;kube-state-metrics&quot;,</span><br><span class="line">                &quot;container&quot;: &quot;coredns&quot;,</span><br><span class="line">                &quot;severity&quot;: &quot;Warning&quot;,</span><br><span class="line">                &quot;kubernetes_namespace&quot;: &quot;kube-system&quot;,</span><br><span class="line">                &quot;namespace&quot;: &quot;kube-system&quot;,</span><br><span class="line">                &quot;instance&quot;: &quot;192.168.171.25:8080&quot;,</span><br><span class="line">                &quot;job&quot;: &quot;kube-state-metrics&quot;,</span><br><span class="line">                &quot;alertname&quot;: &quot;pod_container_restart&quot;,</span><br><span class="line">                &quot;pod&quot;: &quot;coredns-6fc7b84544-58ff6&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;endsAt&quot;: &quot;0001-01-01T00:00:00Z&quot;,</span><br><span class="line">            &quot;generatorURL&quot;: &quot;http://k8s-master-71:9090/graph?g0.expr=kube_pod_container_status_restarts_total+%3E+5&amp;g0.tab=1&quot;,</span><br><span class="line">            &quot;startsAt&quot;: &quot;2019-08-27T19:22:54.730949237+08:00&quot;,</span><br><span class="line">            &quot;annotations&quot;: &#123;</span><br><span class="line">                &quot;description&quot;: &quot;Pod coredns-6fc7b84544-58ff6 in namespace kube-system has a container resstart for more than 5 times&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;version&quot;: &quot;4&quot;,</span><br><span class="line">    &quot;receiver&quot;: &quot;phone_alert&quot;,</span><br><span class="line">    &quot;externalURL&quot;: &quot;http://k8s-master-71:9093&quot;,</span><br><span class="line">    &quot;commonLabels&quot;: &#123;</span><br><span class="line">        &quot;k8s_app&quot;: &quot;kube-state-metrics&quot;,</span><br><span class="line">        &quot;container&quot;: &quot;coredns&quot;,</span><br><span class="line">        &quot;severity&quot;: &quot;Warning&quot;,</span><br><span class="line">        &quot;kubernetes_namespace&quot;: &quot;kube-system&quot;,</span><br><span class="line">        &quot;namespace&quot;: &quot;kube-system&quot;,</span><br><span class="line">        &quot;instance&quot;: &quot;192.168.171.25:8080&quot;,</span><br><span class="line">        &quot;job&quot;: &quot;kube-state-metrics&quot;,</span><br><span class="line">        &quot;alertname&quot;: &quot;pod_container_restart&quot;,</span><br><span class="line">        &quot;pod&quot;: &quot;coredns-6fc7b84544-58ff6&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>电话报警功能封装代码示例：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># url: http://192.168.7.105:8765/phoneWarn/callUp/v1/prome</span><br><span class="line"></span><br><span class="line">@app.route(api_prefix+&apos;prome&apos;, methods=[&apos;POST&apos;])</span><br><span class="line">def prome_alert():</span><br><span class="line">    content_name = &quot;您好&quot;</span><br><span class="line">    phonenums = [&quot;131xxxxxxxx&quot;,&quot;141xxxxxxxx&quot;]</span><br><span class="line">    alert_info = json.loads(request.data)</span><br><span class="line">    call_content = &quot;容器集群&quot; + alert_info[&apos;groupLabels&apos;][&apos;alertname&apos;]</span><br><span class="line">    alert_status = alert_info[&apos;status&apos;]</span><br><span class="line">    if alert_status == &quot;firing&quot;:</span><br><span class="line">        for phonenum in phonenums:</span><br><span class="line">            params = &#123;&quot;taskname&quot;:&quot;&#123;&#125;&quot;.format(call_content), &quot;name&quot;:&quot;&#123;&#125;&quot;.format(content_name),</span><br><span class="line">                      &quot;phonenum&quot;: &quot;&#123;&#125;&quot;.format(phonenum)&#125;</span><br><span class="line">            result = call_method.tts_call(phonenum, json.dumps(params))   # 自己封装的阿里云接口</span><br><span class="line">    elif alert_status == &quot;resolved&quot;:</span><br><span class="line">        params = &#123;&quot;result&quot;: &quot;恢复不电话报警..&quot;&#125;</span><br><span class="line">    logger.info(json.dumps(params, ensure_ascii=False))</span><br><span class="line">    return jsonify(json.loads(result))</span><br></pre></td></tr></table></figure><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li><a href="https://www.li-rui.top/2018/11/12/monitor/Prometheus%20Alertmanager%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">Prometheus Alertmanager使用</a></li><li><a href="https://yunlzheng.gitbook.io/prometheus-book/" target="_blank" rel="noopener">prometheus-book</a></li><li><a href="https://prometheus.io/docs/prometheus/latest/getting_started/" target="_blank" rel="noopener">prometheus document</a></li><li><a href="https://theo.im/blog/2017/10/16/release-prometheus-alertmanager-webhook-for-dingtalk/" target="_blank" rel="noopener">将钉钉接入 Prometheus AlertManager WebHook</a></li><li><a href="https://www.cnblogs.com/longcnblogs/p/9620733.html" target="_blank" rel="noopener">Prometheus 和 Alertmanager实战配置</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;目前公司有两个业务线，所以搭建了两套Kubernetes集群用来部署不同业务，每套集群内部都是用容器部署了一套Prometheus监控自身的业务。基于数据易于分析和预警及时的考虑，故整合两个集群的Prometheus数据到外层的一个Prometheus里，并增加高级别异常电话告警。联邦集群的原理这里不在赘述，各组件具体配置示例如下：&quot;&gt;&lt;a href=&quot;#目前公司有两个业务线，所以搭建了两套Kubernetes集群用来部署不同业务，每套集群内部都是用容器部署了一套Prometheus监控自身的业务。基于数据易于分析和预警及时的考虑，故整合两个集群的Prometheus数据到外层的一个Prometheus里，并增加高级别异常电话告警。联邦集群的原理这里不在赘述，各组件具体配置示例如下：&quot; class=&quot;headerlink&quot; title=&quot;目前公司有两个业务线，所以搭建了两套Kubernetes集群用来部署不同业务，每套集群内部都是用容器部署了一套Prometheus监控自身的业务。基于数据易于分析和预警及时的考虑，故整合两个集群的Prometheus数据到外层的一个Prometheus里，并增加高级别异常电话告警。联邦集群的原理这里不在赘述，各组件具体配置示例如下：&quot;&gt;&lt;/a&gt;目前公司有两个业务线，所以搭建了两套&lt;code&gt;Kubernetes&lt;/code&gt;集群用来部署不同业务，每套集群内部都是用容器部署了一套&lt;code&gt;Prometheus&lt;/code&gt;监控自身的业务。基于数据易于分析和预警及时的考虑，故整合两个集群的&lt;code&gt;Prometheus&lt;/code&gt;数据到外层的一个&lt;code&gt;Prometheus&lt;/code&gt;里，并增加高级别异常电话告警。联邦集群的原理这里不在赘述，各组件具体配置示例如下：&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用log-pilot收集ingress日志</title>
    <link href="http://messay.me/2019/08/20/%E4%BD%BF%E7%94%A8log-pilot%E6%94%B6%E9%9B%86ingress%E6%97%A5%E5%BF%97/"/>
    <id>http://messay.me/2019/08/20/使用log-pilot收集ingress日志/</id>
    <published>2019-08-20T15:53:21.000Z</published>
    <updated>2020-05-17T14:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在Kubernetes集群内收集ingress日志，我们是直接使用了阿里开源的log-pilot做为采集端，将日志经logstash过滤，在汇聚到elasticsearch进行分析。各组件配置示例如下："><a href="#在Kubernetes集群内收集ingress日志，我们是直接使用了阿里开源的log-pilot做为采集端，将日志经logstash过滤，在汇聚到elasticsearch进行分析。各组件配置示例如下：" class="headerlink" title="在Kubernetes集群内收集ingress日志，我们是直接使用了阿里开源的log-pilot做为采集端，将日志经logstash过滤，在汇聚到elasticsearch进行分析。各组件配置示例如下："></a>在Kubernetes集群内收集ingress日志，我们是直接使用了阿里开源的<strong>log-pilot</strong>做为采集端，将日志经<strong>logstash</strong>过滤，在汇聚到<strong>elasticsearch</strong>进行分析。各组件配置示例如下：</h4><h4 id="一、log-pilot本质上也是一个日志的采集端，内部封装了filebeat和fluentd两种不同的采集工具，我们使用的是filebeat。"><a href="#一、log-pilot本质上也是一个日志的采集端，内部封装了filebeat和fluentd两种不同的采集工具，我们使用的是filebeat。" class="headerlink" title="一、log-pilot本质上也是一个日志的采集端，内部封装了filebeat和fluentd两种不同的采集工具，我们使用的是filebeat。"></a>一、<strong>log-pilot</strong>本质上也是一个日志的采集端，内部封装了<strong>filebeat</strong>和<strong>fluentd</strong>两种不同的采集工具，我们使用的是<strong>filebeat</strong>。</h4><a id="more"></a><ul><li><strong>ingress-controller</strong>配置示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"># nginx-ingress-controller.yaml</span><br><span class="line"></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-controller </span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app.kubernetes.io/name: ingress-nginx</span><br><span class="line">      app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app.kubernetes.io/name: ingress-nginx</span><br><span class="line">        app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">      annotations:</span><br><span class="line">        prometheus.io/port: &quot;10254&quot;</span><br><span class="line">        prometheus.io/scrape: &quot;true&quot;</span><br><span class="line">        enable-vts-status: &quot;true&quot;</span><br><span class="line">    spec:</span><br><span class="line">      hostNetwork: true</span><br><span class="line">      dnsPolicy: ClusterFirstWithHostNet</span><br><span class="line">      nodeSelector:</span><br><span class="line">        node-role.kubernetes.io/system: &apos;&apos;</span><br><span class="line">      serviceAccountName: nginx-ingress-serviceaccount </span><br><span class="line">      containers:</span><br><span class="line">        - name: nginx-ingress-controller </span><br><span class="line">          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.24.1</span><br><span class="line">          imagePullPolicy: Always</span><br><span class="line">          args:</span><br><span class="line">            - /nginx-ingress-controller</span><br><span class="line">            - --default-backend-service=$(POD_NAMESPACE)/default-http-backend </span><br><span class="line">            - --configmap=$(POD_NAMESPACE)/nginx-configuration </span><br><span class="line">            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services </span><br><span class="line">            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services </span><br><span class="line">            - --publish-service=$(POD_NAMESPACE)/ingress-nginx </span><br><span class="line">            - --annotations-prefix=nginx.ingress.kubernetes.io</span><br><span class="line">          securityContext:</span><br><span class="line">            capabilities:</span><br><span class="line">              drop:</span><br><span class="line">                - ALL</span><br><span class="line">              add:</span><br><span class="line">                - NET_BIND_SERVICE</span><br><span class="line">            # www-data -&gt; 33</span><br><span class="line">            runAsUser: 33</span><br><span class="line">          env:</span><br><span class="line">            - name: POD_NAME</span><br><span class="line">              valueFrom:</span><br><span class="line">                fieldRef:</span><br><span class="line">                  fieldPath: metadata.name</span><br><span class="line">            - name: POD_NAMESPACE</span><br><span class="line">              valueFrom:</span><br><span class="line">                fieldRef:</span><br><span class="line">                  fieldPath: metadata.namespace</span><br><span class="line">            - name: aliyun_logs_ingress-nginx    ## 注意此处的环境变量对接log-pilot(原理请见参考一)</span><br><span class="line">              value: &quot;stdout&quot;</span><br><span class="line">          ports:</span><br><span class="line">            - name: http</span><br><span class="line">              containerPort: 80</span><br><span class="line">            - name: https</span><br><span class="line">              containerPort: 443</span><br><span class="line">          resources:</span><br><span class="line">            limits:</span><br><span class="line">              cpu: 200m</span><br><span class="line">              memory: 500Mi</span><br><span class="line">            requests:</span><br><span class="line">              cpu: 200m</span><br><span class="line">              memory: 500Mi</span><br><span class="line">          livenessProbe:</span><br><span class="line">            failureThreshold: 3</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /healthz</span><br><span class="line">              port: 10254</span><br><span class="line">              scheme: HTTP</span><br><span class="line">            initialDelaySeconds: 30</span><br><span class="line">            periodSeconds: 10</span><br><span class="line">            successThreshold: 1</span><br><span class="line">            timeoutSeconds: 5</span><br><span class="line">          readinessProbe:</span><br><span class="line">            failureThreshold: 3</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /healthz</span><br><span class="line">              port: 10254</span><br><span class="line">              scheme: HTTP</span><br><span class="line">            periodSeconds: 10</span><br><span class="line">            successThreshold: 1</span><br><span class="line">            timeoutSeconds: 1</span><br></pre></td></tr></table></figure><ul><li><strong>log-pilot</strong>配置示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"># log-pilot-system.yaml</span><br><span class="line"></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: log-pilot-system</span><br><span class="line">  labels:</span><br><span class="line">    app: log-pilot-system</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  updateStrategy:</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: log-pilot-system</span><br><span class="line">      annotations:</span><br><span class="line">        scheduler.alpha.kubernetes.io/critical-pod: &apos;&apos;</span><br><span class="line">    spec:</span><br><span class="line">      hostNetwork: true</span><br><span class="line">      containers:</span><br><span class="line">      - name: log-pilot</span><br><span class="line">        # 版本请参考https://github.com/AliyunContainerService/log-pilot/releases</span><br><span class="line">        image: registry.cn-hangzhou.aliyuncs.com/acs/log-pilot:0.9.7-filebeat</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            memory: 500Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 200m</span><br><span class="line">            memory: 200Mi</span><br><span class="line">        env:</span><br><span class="line">          - name: &quot;NODE_NAME&quot;</span><br><span class="line">            valueFrom:</span><br><span class="line">              fieldRef:</span><br><span class="line">                fieldPath: spec.nodeName</span><br><span class="line">          # - name: &quot;LOGGING_OUTPUT&quot;       # 直接将日志打到es里面</span><br><span class="line">          #   value: &quot;elasticsearch&quot;</span><br><span class="line">          # - name: &quot;ELASTICSEARCH_HOSTS&quot;</span><br><span class="line">          #   value: &quot;192.168.7.75&quot;</span><br><span class="line">          # - name: &quot;LOGSTASH_PORT&quot;</span><br><span class="line">          #   value: &quot;9300&quot;</span><br><span class="line">          - name: &quot;LOGGING_OUTPUT&quot;         # 将日志打到logstash里面</span><br><span class="line">            value: &quot;logstash&quot;</span><br><span class="line">          - name: &quot;LOGSTASH_HOST&quot;</span><br><span class="line">            value: &quot;192.168.7.75&quot;</span><br><span class="line">          - name: &quot;LOGSTASH_PORT&quot;</span><br><span class="line">            value: &quot;5044&quot;</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: sock</span><br><span class="line">          mountPath: /var/run/docker.sock</span><br><span class="line">        - name: root</span><br><span class="line">          mountPath: /host</span><br><span class="line">          readOnly: true</span><br><span class="line">        - name: varlib</span><br><span class="line">          mountPath: /var/lib/filebeat</span><br><span class="line">        - name: varlog</span><br><span class="line">          mountPath: /var/log/filebeat</span><br><span class="line">        - name: localtime</span><br><span class="line">          mountPath: /etc/localtime</span><br><span class="line">          readOnly: true</span><br><span class="line">        livenessProbe:</span><br><span class="line">          failureThreshold: 3</span><br><span class="line">          exec:</span><br><span class="line">            command:</span><br><span class="line">            - /pilot/healthz</span><br><span class="line">          initialDelaySeconds: 10</span><br><span class="line">          periodSeconds: 10</span><br><span class="line">          successThreshold: 1</span><br><span class="line">          timeoutSeconds: 2</span><br><span class="line">        securityContext:</span><br><span class="line">          capabilities:</span><br><span class="line">            add:</span><br><span class="line">            - SYS_ADMIN</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      # 是否允许部署到Master节点上</span><br><span class="line">      tolerations:</span><br><span class="line">      - key: node-role.kubernetes.io/master</span><br><span class="line">        effect: NoSchedule</span><br><span class="line">      affinity:</span><br><span class="line">        nodeAffinity:</span><br><span class="line">          requiredDuringSchedulingIgnoredDuringExecution:</span><br><span class="line">            nodeSelectorTerms:</span><br><span class="line">            - matchExpressions:</span><br><span class="line">              - key: node-role.kubernetes.io/worker</span><br><span class="line">                operator: NotIn</span><br><span class="line">                values:</span><br><span class="line">                - &apos;&apos;</span><br><span class="line">      volumes:</span><br><span class="line">      - name: sock</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /var/run/docker.sock</span><br><span class="line">      - name: root</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /</span><br><span class="line">      - name: varlib</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /var/lib/filebeat</span><br><span class="line">          type: DirectoryOrCreate</span><br><span class="line">      - name: varlog</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /var/log/filebeat</span><br><span class="line">          type: DirectoryOrCreate</span><br><span class="line">      - name: localtime</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /etc/localtime</span><br></pre></td></tr></table></figure><h4 id="二、ingress其实在kubernetes集群内部就是作为nginx来使用的，故logstash的过滤规则可以参考nginx来写。示例如下："><a href="#二、ingress其实在kubernetes集群内部就是作为nginx来使用的，故logstash的过滤规则可以参考nginx来写。示例如下：" class="headerlink" title="二、ingress其实在kubernetes集群内部就是作为nginx来使用的，故logstash的过滤规则可以参考nginx来写。示例如下："></a>二、ingress其实在kubernetes集群内部就是作为nginx来使用的，故<strong>logstash</strong>的过滤规则可以参考nginx来写。示例如下：</h4><ul><li><strong>logstash</strong>配置示例：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># filebeat.yml</span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    patterns_dir =&gt; &quot;/opt/soft/logstash-6.2.4/config/patterns&quot;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">      &quot;message&quot; =&gt; &quot;%&#123;INGRESSACCESS_GET&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">      &quot;message&quot; =&gt; &quot;%&#123;INGRESSACCESS_POST&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    remove_field =&gt; [&quot;source&quot;, &quot;IPV6&quot;, &quot;IPV4&quot;, &quot;QUOTEDSTRING&quot;, &quot;upstream_response&quot;, &quot;URIPARAM&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if [request] == &quot;/status.jsp&quot; &#123;</span><br><span class="line">     drop&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  urldecode &#123;</span><br><span class="line">    all_fields =&gt; true   # 显示中文</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;                        #输出到elasticsearch中</span><br><span class="line">    hosts =&gt; [&quot;192.168.7.75:9200&quot;]       #指定elasticsearch主机</span><br><span class="line">    document_type =&gt; &quot;log&quot;               #设定Elasticsearch输出时的document的type字段，也可以用来给日志进行分类</span><br><span class="line">    template_overwrite =&gt; true           #如果设置为true，模板名字一样的时候，新的模板会覆盖旧的模板</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>patterns</strong>配置示例(此规则可覆盖大多数请求日志，post比较特殊，可根据自己需求修改)：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># patterns-ingress</span><br><span class="line">INGRESSACCESS_GET %&#123;IPORHOST:client_ip&#125; - \[%&#123;IPORHOST:x_forwarded_for&#125;\] - %&#123;DATA:client_identity&#125; \[%&#123;HTTPDATE:timestamp&#125;\] \&quot;(?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:httpversion&#125;)?|-)\&quot; %&#123;NUMBER:http_code&#125; (?:%&#123;NUMBER:bytes_sent;long&#125;|-) (?:&quot;(?:%&#123;URI:referrer&#125;|-)&quot;) %&#123;QS:user_agent&#125; %&#123;NUMBER:request_length;long&#125; %&#123;NUMBER:response_time;double&#125; %&#123;DATA:upstream_proxy&#125; %&#123;NUMBER:upstream_bytes_sent;long&#125; %&#123;NUMBER:upstream_response_time&#125; %&#123;NUMBER:upstream_response&#125; %&#123;BASE16FLOAT:request_id&#125;</span><br><span class="line">INGRESSACCESS_POST %&#123;IPORHOST:client_ip&#125; - \[%&#123;IPORHOST:x_forwarded_for&#125;\] - %&#123;DATA:client_identity&#125; \[%&#123;HTTPDATE:timestamp&#125;\] \&quot;(?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:httpversion&#125;)?|-)\&quot; %&#123;NUMBER:http_code&#125; (?:%&#123;NUMBER:bytes_sent;long&#125;|-) &quot;-&quot; %&#123;QS:user_agent&#125; %&#123;NUMBER:request_length;long&#125; %&#123;NUMBER:response_time;double&#125; %&#123;DATA:upstream_proxy&#125; %&#123;DATA:other&#125;</span><br></pre></td></tr></table></figure><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li><a href="https://help.aliyun.com/document_detail/86552.html" target="_blank" rel="noopener">利用 Log-Pilot + Elasticsearch + Kibana 搭建 kubernetes 日志解决方案</a></li><li><a href="https://github.com/AliyunContainerService/log-pilot" target="_blank" rel="noopener">Collect logs for docker containers</a></li><li><a href="https://gist.github.com/msiegenthaler/ed8172e2c2430076dbe38038cf833550" target="_blank" rel="noopener">Grok pattern for nginx ingress in Kubernetes</a></li><li><a href="https://doc.yonyoucloud.com/doc/logstash-best-practice-cn/index.html" target="_blank" rel="noopener">Logstash 最佳实践</a></li><li><a href="https://github.com/logstash-plugins/logstash-patterns-core/blob/master/patterns/grok-patterns" target="_blank" rel="noopener">grok-patterns</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;在Kubernetes集群内收集ingress日志，我们是直接使用了阿里开源的log-pilot做为采集端，将日志经logstash过滤，在汇聚到elasticsearch进行分析。各组件配置示例如下：&quot;&gt;&lt;a href=&quot;#在Kubernetes集群内收集ingress日志，我们是直接使用了阿里开源的log-pilot做为采集端，将日志经logstash过滤，在汇聚到elasticsearch进行分析。各组件配置示例如下：&quot; class=&quot;headerlink&quot; title=&quot;在Kubernetes集群内收集ingress日志，我们是直接使用了阿里开源的log-pilot做为采集端，将日志经logstash过滤，在汇聚到elasticsearch进行分析。各组件配置示例如下：&quot;&gt;&lt;/a&gt;在Kubernetes集群内收集ingress日志，我们是直接使用了阿里开源的&lt;strong&gt;log-pilot&lt;/strong&gt;做为采集端，将日志经&lt;strong&gt;logstash&lt;/strong&gt;过滤，在汇聚到&lt;strong&gt;elasticsearch&lt;/strong&gt;进行分析。各组件配置示例如下：&lt;/h4&gt;&lt;h4 id=&quot;一、log-pilot本质上也是一个日志的采集端，内部封装了filebeat和fluentd两种不同的采集工具，我们使用的是filebeat。&quot;&gt;&lt;a href=&quot;#一、log-pilot本质上也是一个日志的采集端，内部封装了filebeat和fluentd两种不同的采集工具，我们使用的是filebeat。&quot; class=&quot;headerlink&quot; title=&quot;一、log-pilot本质上也是一个日志的采集端，内部封装了filebeat和fluentd两种不同的采集工具，我们使用的是filebeat。&quot;&gt;&lt;/a&gt;一、&lt;strong&gt;log-pilot&lt;/strong&gt;本质上也是一个日志的采集端，内部封装了&lt;strong&gt;filebeat&lt;/strong&gt;和&lt;strong&gt;fluentd&lt;/strong&gt;两种不同的采集工具，我们使用的是&lt;strong&gt;filebeat&lt;/strong&gt;。&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>为Kubernetes配置Pod生命周期的附加操作程序</title>
    <link href="http://messay.me/2019/08/08/%E4%B8%BAKubernetes%E9%85%8D%E7%BD%AEPod%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E9%99%84%E5%8A%A0%E6%93%8D%E4%BD%9C%E7%A8%8B%E5%BA%8F/"/>
    <id>http://messay.me/2019/08/08/为Kubernetes配置Pod生命周期的附加操作程序/</id>
    <published>2019-08-08T13:41:45.000Z</published>
    <updated>2020-05-17T14:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最近发现集群内的POD在删除的时候，不会自动清理某些自定义配置的网络信息。于是使用了Kubernets的一个功能，在删除或者启动POD的时候，去触发自定义的一些处理程序，避免POD在删除的时候遗留某些信息导致的集群异常。示例如下："><a href="#最近发现集群内的POD在删除的时候，不会自动清理某些自定义配置的网络信息。于是使用了Kubernets的一个功能，在删除或者启动POD的时候，去触发自定义的一些处理程序，避免POD在删除的时候遗留某些信息导致的集群异常。示例如下：" class="headerlink" title="最近发现集群内的POD在删除的时候，不会自动清理某些自定义配置的网络信息。于是使用了Kubernets的一个功能，在删除或者启动POD的时候，去触发自定义的一些处理程序，避免POD在删除的时候遗留某些信息导致的集群异常。示例如下："></a>最近发现集群内的POD在删除的时候，不会自动清理某些自定义配置的网络信息。于是使用了Kubernets的一个功能，在删除或者启动POD的时候，去触发自定义的一些处理程序，避免POD在删除的时候遗留某些信息导致的集群异常。示例如下：</h4><ul><li>Kubernetes在启动Container后立即发送postStart事件，并在Container终止之前立即发送preStop事件。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: lifecycle-demo</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: lifecycle-demo-container</span><br><span class="line">    image: nginx</span><br><span class="line">    lifecycle:</span><br><span class="line">      postStart:</span><br><span class="line">        exec:</span><br><span class="line">          command: [&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;echo Hello from the postStart handler &gt; /usr/share/message&quot;]</span><br><span class="line">      preStop:</span><br><span class="line">        exec:</span><br><span class="line">          command: [&quot;/bin/sh&quot;,&quot;-c&quot;,&quot;nginx -s quit; while killall -0 nginx; do sleep 1; done&quot;]</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>需要注意的是，<strong>preStop</strong>并不会影响SIGTERM的处理，因此有可能<strong>preStop</strong>还没有执行完就收到SIGKILL导致容器强制退出。在这里可以设置<strong>terminationGracePeriodSeconds</strong>，让POD在删除的时候预留执行<strong>preStop</strong>的时间，来保证你的<strong>preStop</strong>事件完整处理。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: lifecycle-demo</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: lifecycle-demo-container</span><br><span class="line">    image: nginx</span><br><span class="line">    lifecycle:</span><br><span class="line">      postStart:</span><br><span class="line">        exec:</span><br><span class="line">          command: [&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;echo Hello from the postStart handler &gt; /usr/share/message&quot;]</span><br><span class="line">      preStop:</span><br><span class="line">        exec:</span><br><span class="line">          command: [&quot;/bin/sh&quot;,&quot;-c&quot;,&quot;nginx -s quit; while killall -0 nginx; do sleep 1; done&quot;]</span><br><span class="line">  terminationGracePeriodSeconds: 60    # 增加此参数，默认时间为30s</span><br></pre></td></tr></table></figure><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li><a href="https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/" target="_blank" rel="noopener">Attach Handlers to Container Lifecycle Events</a></li><li><a href="https://wilhelmguo.cn/blog/post/william/Kubernetes%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%EF%BC%9A%E4%BC%98%E9%9B%85%E7%9A%84%E7%BB%88%E6%AD%A2" target="_blank" rel="noopener">Kubernetes最佳实践：优雅的终止</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;最近发现集群内的POD在删除的时候，不会自动清理某些自定义配置的网络信息。于是使用了Kubernets的一个功能，在删除或者启动POD的时候，去触发自定义的一些处理程序，避免POD在删除的时候遗留某些信息导致的集群异常。示例如下：&quot;&gt;&lt;a href=&quot;#最近发现集群内的POD在删除的时候，不会自动清理某些自定义配置的网络信息。于是使用了Kubernets的一个功能，在删除或者启动POD的时候，去触发自定义的一些处理程序，避免POD在删除的时候遗留某些信息导致的集群异常。示例如下：&quot; class=&quot;headerlink&quot; title=&quot;最近发现集群内的POD在删除的时候，不会自动清理某些自定义配置的网络信息。于是使用了Kubernets的一个功能，在删除或者启动POD的时候，去触发自定义的一些处理程序，避免POD在删除的时候遗留某些信息导致的集群异常。示例如下：&quot;&gt;&lt;/a&gt;最近发现集群内的POD在删除的时候，不会自动清理某些自定义配置的网络信息。于是使用了Kubernets的一个功能，在删除或者启动POD的时候，去触发自定义的一些处理程序，避免POD在删除的时候遗留某些信息导致的集群异常。示例如下：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Kubernetes在启动Container后立即发送postStart事件，并在Container终止之前立即发送preStop事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apiVersion: v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kind: Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;metadata:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: lifecycle-demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spec:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  containers:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - name: lifecycle-demo-container&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    image: nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lifecycle:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      postStart:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        exec:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          command: [&amp;quot;/bin/sh&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;echo Hello from the postStart handler &amp;gt; /usr/share/message&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      preStop:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        exec:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          command: [&amp;quot;/bin/sh&amp;quot;,&amp;quot;-c&amp;quot;,&amp;quot;nginx -s quit; while killall -0 nginx; do sleep 1; done&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>为Kubernetes集群内的Pod配置NFS存储</title>
    <link href="http://messay.me/2019/08/03/%E4%B8%BAKubernetes%E9%9B%86%E7%BE%A4%E5%86%85%E7%9A%84Pod%E9%85%8D%E7%BD%AENFS%E5%AD%98%E5%82%A8/"/>
    <id>http://messay.me/2019/08/03/为Kubernetes集群内的Pod配置NFS存储/</id>
    <published>2019-08-03T15:00:10.000Z</published>
    <updated>2020-05-17T14:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="近一段时间在做容器化的项目，公司需要把nginx也放到kubernetes集群内，nginx有静态资源，如果在每个node节点都同步一份感觉太费劲，所以使用nfs挂载到pod内部使用。pod使用nfs存储有两种方法，介绍如下"><a href="#近一段时间在做容器化的项目，公司需要把nginx也放到kubernetes集群内，nginx有静态资源，如果在每个node节点都同步一份感觉太费劲，所以使用nfs挂载到pod内部使用。pod使用nfs存储有两种方法，介绍如下" class="headerlink" title="近一段时间在做容器化的项目，公司需要把nginx也放到kubernetes集群内，nginx有静态资源，如果在每个node节点都同步一份感觉太费劲，所以使用nfs挂载到pod内部使用。pod使用nfs存储有两种方法，介绍如下:"></a>近一段时间在做容器化的项目，公司需要把nginx也放到kubernetes集群内，nginx有静态资源，如果在每个node节点都同步一份感觉太费劲，所以使用nfs挂载到pod内部使用。pod使用nfs存储有两种方法，介绍如下:</h4><h4 id="一、在pod直接挂载nfs存储"><a href="#一、在pod直接挂载nfs存储" class="headerlink" title="一、在pod直接挂载nfs存储"></a>一、在pod直接挂载nfs存储</h4><div class="tip">特别注意: 使用此种方法在pod里挂载nfs,务必要在pod所调度的节点上安装<strong>nfs-utils</strong>,否则无法挂载!!!</div><ul><li><p>最近的几个Kubernetes大版本已经原生支持在pod内部直接挂载nfs存储，只需把volumes的类型改成nfs就行，示例如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">kind: Pod</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-in-a-pod</span><br><span class="line">spec:</span><br><span class="line">  # hostNetwork: true</span><br><span class="line">  containers:</span><br><span class="line">    - name: app</span><br><span class="line">      image: alpine</span><br><span class="line">      volumeMounts:</span><br><span class="line">        - name: nfs-volume</span><br><span class="line">          mountPath: /var/nfs</span><br><span class="line">      command: [&quot;/bin/sh&quot;]</span><br><span class="line">      args: [&quot;-c&quot;, &quot;sleep 5000000000&quot;]</span><br><span class="line">  volumes:</span><br><span class="line">    - name: nfs-volume</span><br><span class="line">      nfs:</span><br><span class="line">        server: 192.168.7.107</span><br><span class="line">        path: /tmp/nfs_test</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h4 id="二、使用pvc挂载nfs存储"><a href="#二、使用pvc挂载nfs存储" class="headerlink" title="二、使用pvc挂载nfs存储"></a>二、使用pvc挂载nfs存储</h4><ul><li><p>创建pv:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: my-nfs-share</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 5Gi </span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce </span><br><span class="line">  persistentVolumeReclaimPolicy: Retain  # 特别注意pv的回收策略,此处若需要pv删除后,nfs文件存在,则需要配置回收策略为:Retain</span><br><span class="line">  nfs:</span><br><span class="line">    server: 192.168.7.107 </span><br><span class="line">    path: /tmp/nfs_test</span><br></pre></td></tr></table></figure></li><li><p>创建pvc:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: myapp-nfs</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 5Gi</span><br></pre></td></tr></table></figure></li><li><p>创建pod:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">kind: Pod</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-in-a-pod</span><br><span class="line">spec:</span><br><span class="line">  # hostNetwork: true</span><br><span class="line">  containers:</span><br><span class="line">    - name: app</span><br><span class="line">      image: alpine</span><br><span class="line">      volumeMounts:</span><br><span class="line">        - name: nfs-volume</span><br><span class="line">          mountPath: /var/nfs</span><br><span class="line">      command: [&quot;/bin/sh&quot;]</span><br><span class="line">      args: [&quot;-c&quot;, &quot;sleep 5000000000&quot;]</span><br><span class="line">  volumes:</span><br><span class="line">    - name: nfs-volume</span><br><span class="line">      persistentVolumeClaim:</span><br><span class="line">        claimName: myapp-nfs</span><br></pre></td></tr></table></figure></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h4><ul><li><a href="https://docs.docker.com/ee/ucp/kubernetes/storage/use-nfs-volumes/" target="_blank" rel="noopener">pod使用nfs两种方法</a></li><li><a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#reclaiming" target="_blank" rel="noopener">pv回收策略</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;近一段时间在做容器化的项目，公司需要把nginx也放到kubernetes集群内，nginx有静态资源，如果在每个node节点都同步一份感觉太费劲，所以使用nfs挂载到pod内部使用。pod使用nfs存储有两种方法，介绍如下&quot;&gt;&lt;a href=&quot;#近一段时间在做容器化的项目，公司需要把nginx也放到kubernetes集群内，nginx有静态资源，如果在每个node节点都同步一份感觉太费劲，所以使用nfs挂载到pod内部使用。pod使用nfs存储有两种方法，介绍如下&quot; class=&quot;headerlink&quot; title=&quot;近一段时间在做容器化的项目，公司需要把nginx也放到kubernetes集群内，nginx有静态资源，如果在每个node节点都同步一份感觉太费劲，所以使用nfs挂载到pod内部使用。pod使用nfs存储有两种方法，介绍如下:&quot;&gt;&lt;/a&gt;近一段时间在做容器化的项目，公司需要把nginx也放到kubernetes集群内，nginx有静态资源，如果在每个node节点都同步一份感觉太费劲，所以使用nfs挂载到pod内部使用。pod使用nfs存储有两种方法，介绍如下:&lt;/h4&gt;&lt;h4 id=&quot;一、在pod直接挂载nfs存储&quot;&gt;&lt;a href=&quot;#一、在pod直接挂载nfs存储&quot; class=&quot;headerlink&quot; title=&quot;一、在pod直接挂载nfs存储&quot;&gt;&lt;/a&gt;一、在pod直接挂载nfs存储&lt;/h4&gt;&lt;div class=&quot;tip&quot;&gt;特别注意: 使用此种方法在pod里挂载nfs,务必要在pod所调度的节点上安装&lt;strong&gt;nfs-utils&lt;/strong&gt;,否则无法挂载!!!&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;最近的几个Kubernetes大版本已经原生支持在pod内部直接挂载nfs存储，只需把volumes的类型改成nfs就行，示例如下：&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kind: Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apiVersion: v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;metadata:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: nfs-in-a-pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spec:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  # hostNetwork: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  containers:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - name: app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      image: alpine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      volumeMounts:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - name: nfs-volume&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          mountPath: /var/nfs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      command: [&amp;quot;/bin/sh&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      args: [&amp;quot;-c&amp;quot;, &amp;quot;sleep 5000000000&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  volumes:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - name: nfs-volume&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      nfs:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        server: 192.168.7.107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        path: /tmp/nfs_test&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>两步清理Harbor磁盘空间</title>
    <link href="http://messay.me/2019/08/03/%E4%B8%A4%E6%AD%A5%E6%B8%85%E7%90%86Harbor%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4/"/>
    <id>http://messay.me/2019/08/03/两步清理Harbor磁盘空间/</id>
    <published>2019-08-03T14:57:23.000Z</published>
    <updated>2020-05-22T14:28:08.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="测试环境的Harbor磁盘已经不堪重负-一天不知道多少个迭代测试包丢上面，清理已经刻不容缓。因公司使用Harbor版本比较老，无法在线清理，故需要两步清理：先删除不需要的tag，然后在使用garbage-collection-GC-回收磁盘空间。"><a href="#测试环境的Harbor磁盘已经不堪重负-一天不知道多少个迭代测试包丢上面，清理已经刻不容缓。因公司使用Harbor版本比较老，无法在线清理，故需要两步清理：先删除不需要的tag，然后在使用garbage-collection-GC-回收磁盘空间。" class="headerlink" title="测试环境的Harbor磁盘已经不堪重负,一天不知道多少个迭代测试包丢上面，清理已经刻不容缓。因公司使用Harbor版本比较老，无法在线清理，故需要两步清理：先删除不需要的tag，然后在使用garbage collection(GC)回收磁盘空间。"></a>测试环境的Harbor磁盘已经不堪重负,一天不知道多少个迭代测试包丢上面，清理已经刻不容缓。因公司使用Harbor版本比较老，无法在线清理，故需要两步清理：先删除不需要的tag，然后在使用garbage collection(GC)回收磁盘空间。</h4><div class="tip">Harbor已经在1.7.0版本支持在线清理空间.</div><a id="more"></a><h4 id="一、清理不需要的镜像tag"><a href="#一、清理不需要的镜像tag" class="headerlink" title="一、清理不需要的镜像tag"></a>一、清理不需要的镜像tag</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/env python3</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># 此脚本基于时间排序，仅保留最新的15个tag</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CleanHarbor:</span><br><span class="line">    def __init__(self, user, password):</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.base_url = &quot;https://registry.youdomain.com/&quot;</span><br><span class="line">        self.login_url = self.base_url + &apos;login&apos;</span><br><span class="line">        self.project_url = self.base_url + &apos;api/projects&apos;</span><br><span class="line">        self.repo_url = self.base_url + &apos;api/repositories&apos;</span><br><span class="line">        self.session = requests.Session()</span><br><span class="line">        self.session.verify = False</span><br><span class="line">        # 此处是个坑,harbor源码auth部分的username是principal,故params参数必须是principal,否则会401</span><br><span class="line">        self.session.post(self.login_url, params=&#123;&quot;principal&quot;: self.user, &quot;password&quot;: self.password&#125;)</span><br><span class="line"></span><br><span class="line">    def get_project(self):</span><br><span class="line">        project_info = []</span><br><span class="line">        harbor_info = self.session.get(self.project_url).json()</span><br><span class="line">        for project in harbor_info:</span><br><span class="line">            info = &#123;&#125;</span><br><span class="line">            info[&apos;project_id&apos;] = project[&apos;project_id&apos;]</span><br><span class="line">            info[&apos;project_name&apos;] = project[&apos;name&apos;]</span><br><span class="line">            project_info.append(info)</span><br><span class="line">        return project_info</span><br><span class="line"></span><br><span class="line">    def get_delete_repo(self):</span><br><span class="line">        project_info = self.get_project()</span><br><span class="line">        delete_reponame = []</span><br><span class="line">        for project_id in project_info:</span><br><span class="line">            repo_info = self.session.get(self.repo_url, params=&#123;&quot;project_id&quot;: project_id[&apos;project_id&apos;]&#125;).json()</span><br><span class="line">            for repo in repo_info:</span><br><span class="line">                if repo[&apos;tags_count&apos;] &gt; 15:</span><br><span class="line">                    delete_reponame.append(repo[&apos;name&apos;])</span><br><span class="line">        return delete_reponame</span><br><span class="line"></span><br><span class="line">    def delete_repo_tag(self):</span><br><span class="line">        delete_reponame = self.get_delete_repo()</span><br><span class="line">        for repo_name in delete_reponame:</span><br><span class="line">            tag_url = self.repo_url + &quot;/&quot; + repo_name + &quot;/tags&quot;</span><br><span class="line">            tags = self.session.get(tag_url).json()</span><br><span class="line">            tags_sort = sorted(tags, key=lambda tags: tags[&quot;created&quot;])</span><br><span class="line">            del_tags = tags_sort[0:len(tags_sort) - 15]</span><br><span class="line">            for tag in del_tags:</span><br><span class="line">                del_repo_tag_url = tag_url + &quot;/&quot; + tag[&apos;name&apos;]</span><br><span class="line">                result = self.session.delete(del_repo_tag_url)</span><br><span class="line">                if result.status_code == 200:</span><br><span class="line">                    print(&apos;&#123;&#125;:&#123;&#125; tag删除成功..&apos;.format(repo_name, tag[&apos;name&apos;]))</span><br><span class="line">        print(&quot;所有tag删除完成...&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    Harobr = CleanHarbor(&apos;admin&apos;, &apos;Harbor12345&apos;)</span><br><span class="line">    Harobr.delete_repo_tag()</span><br></pre></td></tr></table></figure><h4 id="二、使用garbage-collection-GC-机制删除镜像的实际文件"><a href="#二、使用garbage-collection-GC-机制删除镜像的实际文件" class="headerlink" title="二、使用garbage collection(GC)机制删除镜像的实际文件"></a>二、使用garbage collection(GC)机制删除镜像的实际文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 先停止harbor服务</span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"># 使用gc回收磁盘空间(GC使用“标记-清理”法)</span><br><span class="line"># 第一步，标记:registry扫描元数据，元数据能够索引到的blob标记为不能删除</span><br><span class="line"># 第二步，清理:registry扫描所有blobs，如果该blob没有被标记，则删除它</span><br><span class="line"># 注意此处的registry-photon,请保持和你的版本一致,如下图</span><br><span class="line">image_name=$(docker ps | grep registry | grep photon | awk -F &quot; &quot; &apos;&#123;print $2&#125;&apos;)</span><br><span class="line">docker run -it --name gc --rm --volumes-from registry $&#123;image_name&#125; garbage-collect  /etc/registry/config.yml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 启动Harbor</span><br><span class="line">docker-compose start</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/03/7haTXbVHmujp8rD.jpg" alt></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h4><ul><li><a href="https://www.cnblogs.com/breezey/p/10615231.html" target="_blank" rel="noopener">tag清理脚本</a></li><li><a href="https://ieevee.com/tech/2017/12/28/docker-registry-gc.html" target="_blank" rel="noopener">gc回收步骤</a></li><li><a href="https://github.com/goharbor/harbor/blob/master/docs/user_guide.md#deleting-repositories" target="_blank" rel="noopener">harbor user guide</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;测试环境的Harbor磁盘已经不堪重负-一天不知道多少个迭代测试包丢上面，清理已经刻不容缓。因公司使用Harbor版本比较老，无法在线清理，故需要两步清理：先删除不需要的tag，然后在使用garbage-collection-GC-回收磁盘空间。&quot;&gt;&lt;a href=&quot;#测试环境的Harbor磁盘已经不堪重负-一天不知道多少个迭代测试包丢上面，清理已经刻不容缓。因公司使用Harbor版本比较老，无法在线清理，故需要两步清理：先删除不需要的tag，然后在使用garbage-collection-GC-回收磁盘空间。&quot; class=&quot;headerlink&quot; title=&quot;测试环境的Harbor磁盘已经不堪重负,一天不知道多少个迭代测试包丢上面，清理已经刻不容缓。因公司使用Harbor版本比较老，无法在线清理，故需要两步清理：先删除不需要的tag，然后在使用garbage collection(GC)回收磁盘空间。&quot;&gt;&lt;/a&gt;测试环境的Harbor磁盘已经不堪重负,一天不知道多少个迭代测试包丢上面，清理已经刻不容缓。因公司使用Harbor版本比较老，无法在线清理，故需要两步清理：先删除不需要的tag，然后在使用garbage collection(GC)回收磁盘空间。&lt;/h4&gt;&lt;div class=&quot;tip&quot;&gt;Harbor已经在1.7.0版本支持在线清理空间.&lt;/div&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mega网盘命令行模式使用说明</title>
    <link href="http://messay.me/2019/07/27/mega%E7%BD%91%E7%9B%98%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A8%A1%E5%BC%8F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>http://messay.me/2019/07/27/mega网盘命令行模式使用说明/</id>
    <published>2019-07-27T14:17:47.000Z</published>
    <updated>2020-05-17T14:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="之前买了一台小鸡是打算做梯子用的，但是搭的梯子质量并不是很好，时断时续。于是想着不能浪费就在上面搭了一个transmission用来下载bt。毕竟是台小鸡，网络传输还是慢，下载的东西传到本地机器还是很慢，于是就用mega代理了一下，先上传到mega上，然后在下载到本地，所以使用mega命令行来操作。"><a href="#之前买了一台小鸡是打算做梯子用的，但是搭的梯子质量并不是很好，时断时续。于是想着不能浪费就在上面搭了一个transmission用来下载bt。毕竟是台小鸡，网络传输还是慢，下载的东西传到本地机器还是很慢，于是就用mega代理了一下，先上传到mega上，然后在下载到本地，所以使用mega命令行来操作。" class="headerlink" title="之前买了一台小鸡是打算做梯子用的，但是搭的梯子质量并不是很好，时断时续。于是想着不能浪费就在上面搭了一个transmission用来下载bt。毕竟是台小鸡，网络传输还是慢，下载的东西传到本地机器还是很慢，于是就用mega代理了一下，先上传到mega上，然后在下载到本地，所以使用mega命令行来操作。"></a>之前买了一台小鸡是打算做梯子用的，但是搭的梯子质量并不是很好，时断时续。于是想着不能浪费就在上面搭了一个transmission用来下载bt。毕竟是台小鸡，网络传输还是慢，下载的东西传到本地机器还是很慢，于是就用mega代理了一下，先上传到mega上，然后在下载到本地，所以使用mega命令行来操作。</h4><div class="tip">mega网盘确实蛮好用的，免费的也基本够用了</div><h4 id="mega命令行使用："><a href="#mega命令行使用：" class="headerlink" title="mega命令行使用："></a>mega命令行使用：</h4><ul><li>基本操作：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 先进入mega命令行模式</span><br><span class="line"># mega-cmd</span><br><span class="line"></span><br><span class="line"># 以下所有操作全是都是在mega-cmd命令行模式进行</span><br><span class="line"></span><br><span class="line"># 使用login命令，登录成功不会显示成功之类的信息，会直接进入默认用户的目录,下图</span><br><span class="line">login yourname@mail.com|username password       # 登录</span><br><span class="line">logout                                          # 登出</span><br><span class="line">quit|exit                                       # 退出</span><br><span class="line"></span><br><span class="line"># 基础操作(同linux)</span><br><span class="line">cd /pathname                                   # 进入目录</span><br><span class="line">ls /pathname                                   # 查看目录文件</span><br><span class="line">mkdir /pathname                                # 创建文件夹</span><br><span class="line">...</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="https://i.loli.net/2019/07/27/5d3bf5d9bdbd818623.jpg" alt></p><ul><li>常用操作：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 上传</span><br><span class="line">put [-c] [-q] [--ignore-quota-warn] localfile [localfile2 localfile3 ...] [dstremotepath]</span><br><span class="line"># 后面若不跟远程路径,则默认传到当前所在的远程路径(可使用-c创建远程路径)</span><br><span class="line">put /root/test.mp4  /movies</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 下载</span><br><span class="line">get [-m] [-q] [--ignore-quota-warn] exportedlink#key|remotepath [localpath]</span><br><span class="line"># 若本地文件夹和远程文件夹,可跟-m参数合并本地文件夹</span><br><span class="line">get /MEGAsync/Kubernetes.pdf /root/</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">rm [-r] [-f] remotepath</span><br><span class="line"># -rf强制删除</span><br><span class="line">rm /MEGAsync/Kubernetes.pdf</span><br><span class="line"></span><br><span class="line"># 同步</span><br><span class="line">sync [localpath dstremotepath| [-dsr] [ID|localpath]</span><br><span class="line"># -d id删除同步、-s id停止、-r id重新开始、啥都不加展示当前同步任务</span><br><span class="line">sync /var/lib/transmission/Downloads/  /movies </span><br><span class="line"></span><br><span class="line"># transfers</span><br><span class="line">transfers [-c TAG|-a] | [-r TAG|-a] | [-p TAG|-a] [--only-downloads | --only-uploads] [SHOWOPTIONS]</span><br></pre></td></tr></table></figure><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li><a href="https://mega.nz/cmd" target="_blank" rel="noopener">mega-cmd</a></li><li><a href="https://github.com/meganz/MEGAcmd/blob/master/UserGuide.md" target="_blank" rel="noopener">mega-cmd UserGuide</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;之前买了一台小鸡是打算做梯子用的，但是搭的梯子质量并不是很好，时断时续。于是想着不能浪费就在上面搭了一个transmission用来下载bt。毕竟是台小鸡，网络传输还是慢，下载的东西传到本地机器还是很慢，于是就用mega代理了一下，先上传到mega上，然后在下载到本地，所以使用mega命令行来操作。&quot;&gt;&lt;a href=&quot;#之前买了一台小鸡是打算做梯子用的，但是搭的梯子质量并不是很好，时断时续。于是想着不能浪费就在上面搭了一个transmission用来下载bt。毕竟是台小鸡，网络传输还是慢，下载的东西传到本地机器还是很慢，于是就用mega代理了一下，先上传到mega上，然后在下载到本地，所以使用mega命令行来操作。&quot; class=&quot;headerlink&quot; title=&quot;之前买了一台小鸡是打算做梯子用的，但是搭的梯子质量并不是很好，时断时续。于是想着不能浪费就在上面搭了一个transmission用来下载bt。毕竟是台小鸡，网络传输还是慢，下载的东西传到本地机器还是很慢，于是就用mega代理了一下，先上传到mega上，然后在下载到本地，所以使用mega命令行来操作。&quot;&gt;&lt;/a&gt;之前买了一台小鸡是打算做梯子用的，但是搭的梯子质量并不是很好，时断时续。于是想着不能浪费就在上面搭了一个transmission用来下载bt。毕竟是台小鸡，网络传输还是慢，下载的东西传到本地机器还是很慢，于是就用mega代理了一下，先上传到mega上，然后在下载到本地，所以使用mega命令行来操作。&lt;/h4&gt;&lt;div class=&quot;tip&quot;&gt;mega网盘确实蛮好用的，免费的也基本够用了&lt;/div&gt;


&lt;h4 id=&quot;mega命令行使用：&quot;&gt;&lt;a href=&quot;#mega命令行使用：&quot; class=&quot;headerlink&quot; title=&quot;mega命令行使用：&quot;&gt;&lt;/a&gt;mega命令行使用：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;基本操作：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 先进入mega命令行模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# mega-cmd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 以下所有操作全是都是在mega-cmd命令行模式进行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 使用login命令，登录成功不会显示成功之类的信息，会直接进入默认用户的目录,下图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;login yourname@mail.com|username password       # 登录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logout                                          # 登出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;quit|exit                                       # 退出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 基础操作(同linux)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd /pathname                                   # 进入目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls /pathname                                   # 查看目录文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir /pathname                                # 创建文件夹&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭建DNS管理平台的一些注意要点</title>
    <link href="http://messay.me/2019/07/20/%E6%90%AD%E5%BB%BADNS%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E8%A6%81%E7%82%B9/"/>
    <id>http://messay.me/2019/07/20/搭建DNS管理平台的一些注意要点/</id>
    <published>2019-07-20T02:32:32.000Z</published>
    <updated>2020-05-17T14:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="公司内部一直缺少一个管理DNS的平台，故搭建了一个WEB页面，用来管理内部的DNS解析。期间遇到的一些坑，分享一下。"><a href="#公司内部一直缺少一个管理DNS的平台，故搭建了一个WEB页面，用来管理内部的DNS解析。期间遇到的一些坑，分享一下。" class="headerlink" title="公司内部一直缺少一个管理DNS的平台，故搭建了一个WEB页面，用来管理内部的DNS解析。期间遇到的一些坑，分享一下。"></a>公司内部一直缺少一个管理DNS的平台，故搭建了一个WEB页面，用来管理内部的DNS解析。期间遇到的一些坑，分享一下。</h4><h4 id="一、BIND-DNS主从模式选择"><a href="#一、BIND-DNS主从模式选择" class="headerlink" title="一、BIND-DNS主从模式选择"></a>一、BIND-DNS主从模式选择</h4><ul><li>如果使用web页面来管理DNS，其实BIND-DNS最方便的是主和从都采用数据库作为后端数据存储。主DNS使用主数据库，然后从DNS使用从数据库。然后web页面修改了主数据库后，那么从数据库也会实时同步更新。达到DNS主从同步的目的；</li><li>采用以上方法虽然简单，但是一个致命的问题。就是如果使用数据库作为DNS的后端存储，那么DNS的解析速度是远远不如使用文件作为后端数据存储的(对比下图)；</li><li>综上，故建议主DNS使用数据库存储，然后web页面管理主DNS。而从DNS使用文件存储，每次修改主DNS数据库，自动同步数据到从DNS的文件上，所有的主机使用从DNS作为DNS服务器，达到管理方便和解析快速的双重目的；<a id="more"></a></li><li>一张解析速度对比图：</li></ul><p><img src="https://i.loli.net/2019/07/17/5d2effe7abfda66317.png" alt></p><h4 id="二、DNS主从同步实时处理"><a href="#二、DNS主从同步实时处理" class="headerlink" title="二、DNS主从同步实时处理"></a>二、DNS主从同步实时处理</h4><ul><li>一般来说，DNS主从同时使用相同模式，基本不存在数据不同步的问题。但是如果主从使用不同模式部署，就会出现数据不同步的异常；</li><li>采用不同模式，在主DNS修改了数据之后，从DNS是根据设定的refresh值来同步的。如果解析可接受延迟，那么可把refresh值修改的短一点，实现主从同步；</li><li>如果接受不了延迟，那么可使用rndc命令手动强制刷新，在修改了主DNS的数据后，强制同步从DNS，示例代码如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 手动强制refresh记录，不等300s</span><br><span class="line">def record_refresh(domain_name):</span><br><span class="line">    DNS_slave_ip = settings.DNS_SLAVE_IP</span><br><span class="line">    result_code = []</span><br><span class="line">    for slave_ip in DNS_slave_ip:</span><br><span class="line">        command = &apos;rndc -s &#123;&#125; -p 953 -k rndc.key refresh &quot;&#123;&#125;&quot;&apos;.format(slave_ip, domain_name)</span><br><span class="line">        result_code.append(subprocess.call(command, shell=True))</span><br><span class="line">    for i in range(len(result_code)):</span><br><span class="line">        if result_code[i] != 0:</span><br><span class="line">            return False</span><br><span class="line">    print(&apos;refresh success..&apos;)</span><br></pre></td></tr></table></figure><h4 id="三、serial导致的不同步"><a href="#三、serial导致的不同步" class="headerlink" title="三、serial导致的不同步"></a>三、<code>serial</code>导致的不同步</h4><ul><li><code>serial</code>是SOA默认参数，这个参数非常重要，当从DNS需要<code>refresh</code>解析的时候，会先去查下<code>serial</code>的值是否改变(增加)，若<code>serial</code>有增加，则会<code>refresh</code>当前从DNS的解析记录，反之则不进行任何变动；</li><li>当你在web页面编辑DNS解析的时候，不管是增加、删除，或者修改，都需要变动<code>serial</code>的值，每变动一次都需要将数值其增加；</li></ul><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li>速度对比图：<a href="http://bind-dlz.sourceforge.net/perf_tests.html" target="_blank" rel="noopener">http://bind-dlz.sourceforge.net/perf_tests.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;公司内部一直缺少一个管理DNS的平台，故搭建了一个WEB页面，用来管理内部的DNS解析。期间遇到的一些坑，分享一下。&quot;&gt;&lt;a href=&quot;#公司内部一直缺少一个管理DNS的平台，故搭建了一个WEB页面，用来管理内部的DNS解析。期间遇到的一些坑，分享一下。&quot; class=&quot;headerlink&quot; title=&quot;公司内部一直缺少一个管理DNS的平台，故搭建了一个WEB页面，用来管理内部的DNS解析。期间遇到的一些坑，分享一下。&quot;&gt;&lt;/a&gt;公司内部一直缺少一个管理DNS的平台，故搭建了一个WEB页面，用来管理内部的DNS解析。期间遇到的一些坑，分享一下。&lt;/h4&gt;&lt;h4 id=&quot;一、BIND-DNS主从模式选择&quot;&gt;&lt;a href=&quot;#一、BIND-DNS主从模式选择&quot; class=&quot;headerlink&quot; title=&quot;一、BIND-DNS主从模式选择&quot;&gt;&lt;/a&gt;一、BIND-DNS主从模式选择&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;如果使用web页面来管理DNS，其实BIND-DNS最方便的是主和从都采用数据库作为后端数据存储。主DNS使用主数据库，然后从DNS使用从数据库。然后web页面修改了主数据库后，那么从数据库也会实时同步更新。达到DNS主从同步的目的；&lt;/li&gt;
&lt;li&gt;采用以上方法虽然简单，但是一个致命的问题。就是如果使用数据库作为DNS的后端存储，那么DNS的解析速度是远远不如使用文件作为后端数据存储的(对比下图)；&lt;/li&gt;
&lt;li&gt;综上，故建议主DNS使用数据库存储，然后web页面管理主DNS。而从DNS使用文件存储，每次修改主DNS数据库，自动同步数据到从DNS的文件上，所有的主机使用从DNS作为DNS服务器，达到管理方便和解析快速的双重目的；
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Centos6.10 安装Docker 17.03.2-ce</title>
    <link href="http://messay.me/2019/07/16/Centos6-10-%E5%AE%89%E8%A3%85Docker-17-03-2-ce/"/>
    <id>http://messay.me/2019/07/16/Centos6-10-安装Docker-17-03-2-ce/</id>
    <published>2019-07-16T14:11:03.000Z</published>
    <updated>2020-05-17T14:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前两天需要在Centos6上面封装docker镜像需要安装docker，但是发现在Centos6上安装docker只能安装docker-1-7-1版本。此版本推送镜像到harbor验证有问题，故需要升级docker版本到17-03-2-ce。"><a href="#前两天需要在Centos6上面封装docker镜像需要安装docker，但是发现在Centos6上安装docker只能安装docker-1-7-1版本。此版本推送镜像到harbor验证有问题，故需要升级docker版本到17-03-2-ce。" class="headerlink" title="前两天需要在Centos6上面封装docker镜像需要安装docker，但是发现在Centos6上安装docker只能安装docker 1.7.1版本。此版本推送镜像到harbor验证有问题，故需要升级docker版本到17.03.2-ce。"></a>前两天需要在Centos6上面封装docker镜像需要安装docker，但是发现在Centos6上安装docker只能安装docker 1.7.1版本。此版本推送镜像到harbor验证有问题，故需要升级docker版本到17.03.2-ce。</h4><div class="tip">特别注意,编译安装过程极度依赖梯子,否则安装很难成功!</div><h4 id="一、升级内核"><a href="#一、升级内核" class="headerlink" title="一、升级内核"></a>一、升级内核</h4><ul><li>在centos6上安装docker17.03.2，需要先将内核升级到3.10版本(未考证?)，故直接安装最新稳定版内核</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-6-8.el6.elrepo.noarch.rpm</span><br><span class="line">yum install kernel-lt -y</span><br><span class="line">sed -i &apos;s/default=1/default=0/g&apos; /etc/grub.conf</span><br><span class="line">reboot</span><br><span class="line">uname -sr  #Linux 4.4.185-1.el6.elrepo.x86_64</span><br></pre></td></tr></table></figure><h4 id="二、安装依赖docker环境"><a href="#二、安装依赖docker环境" class="headerlink" title="二、安装依赖docker环境"></a>二、安装依赖docker环境</h4><ul><li>docker 17.03.2安装全部都是在docker里面完成的，故需要安装一个老版本的docker，才能编译安装17.03版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 安装1.7.1版本</span><br><span class="line">rpm -ivfh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm</span><br><span class="line">yum install https://get.docker.com/rpm/1.7.1/centos-6/RPMS/x86_64/docker-engine-1.7.1-1.el6.x86_64.rpm</span><br><span class="line"></span><br><span class="line">docker version # version: 1.7.1</span><br><span class="line"></span><br><span class="line">#下载1.9.1然后替换</span><br><span class="line">curl -sSL -O https://get.docker.com/builds/Linux/x86_64/docker-1.9.1</span><br><span class="line">chmod +x docker-1.9.1</span><br><span class="line">mv docker-1.9.1 /usr/bin/docker</span><br><span class="line"> </span><br><span class="line">service docker restart</span><br><span class="line"></span><br><span class="line">docker version # version: 1.9.1</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="三、安装依赖环境"><a href="#三、安装依赖环境" class="headerlink" title="三、安装依赖环境"></a>三、安装依赖环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">yum install git make -y</span><br><span class="line"></span><br><span class="line">#Docker使用Golang开发</span><br><span class="line">wget https://dl.google.com/go/go1.10.linux-amd64.tar.gz</span><br><span class="line">tar xzf go1.10.linux-amd64.tar.gz -C /usr/local</span><br><span class="line">mkdir /usr/local/gopackage</span><br><span class="line"> </span><br><span class="line">vi /etc/profile</span><br><span class="line">#在profile中加入下面的环境变量，PATH如果原来就有请自行合并</span><br><span class="line">GOROOT=/usr/local/go</span><br><span class="line">GOPATH=/usr/local/gopackage</span><br><span class="line">PATH=$PATH:$GOROOT/bin:$GOPATH/bin</span><br><span class="line">export GOROOT GOPATH PATH</span><br><span class="line"> </span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="四、安装docker"><a href="#四、安装docker" class="headerlink" title="四、安装docker"></a>四、安装docker</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 修改git缓存,防止git clone中断</span><br><span class="line">git config --global http.postBuffer 524288000</span><br><span class="line"></span><br><span class="line">git clone https://github.com/moby/moby</span><br><span class="line">cd moby</span><br><span class="line"></span><br><span class="line"># 选择17.03.2</span><br><span class="line">git checkout v17.03.2-ce</span><br><span class="line"></span><br><span class="line"># 编辑Dockerfile</span><br><span class="line">vim Dockerfile</span><br><span class="line"></span><br><span class="line"># 修改130为:</span><br><span class="line">RUN curl -fsSL &quot;https://golang.org/dl/go$&#123;GO_VERSION&#125;.linux-amd64.tar.gz&quot; \</span><br><span class="line"></span><br><span class="line"># 建议在第一个git clone之前RUN一个代理，否则git clone大概率失败</span><br><span class="line">RUN git config --global http.https://github.com.proxy socks5://127.0.0.1:1080 \</span><br><span class="line"></span><br><span class="line">make build    # 此步骤极度耗时，且因为某种原因，安装过程极易中断</span><br><span class="line">make binary</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="五、移除旧版本，指向新版本"><a href="#五、移除旧版本，指向新版本" class="headerlink" title="五、移除旧版本，指向新版本"></a>五、移除旧版本，指向新版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#卸载旧的docker</span><br><span class="line">yum remove docker-engine* -y</span><br><span class="line"></span><br><span class="line">#清理下遗留的文件</span><br><span class="line">rm -rf /var/lib/docker/*</span><br><span class="line"></span><br><span class="line">#docker 配置文件</span><br><span class="line">wget https://raw.githubusercontent.com/moby/moby/master/contrib/init/sysvinit-redhat/docker.sysconfig -O /etc/sysconfig/docker</span><br><span class="line"></span><br><span class="line">#docker init启动文件</span><br><span class="line">wget https://raw.githubusercontent.com/moby/moby/master/contrib/init/sysvinit-redhat/docker -O /etc/init.d/docker</span><br><span class="line"></span><br><span class="line">#修改启动文件中dockerd的位置</span><br><span class="line">sed -i &quot;27s#usr/bin#usr/local/bin#g&quot; /etc/init.d/docker</span><br><span class="line"></span><br><span class="line">#修改环境变量，覆盖functions脚本中的PATH，防止无法找到docker-container等程序</span><br><span class="line">sed -i &quot;23s#functions#functions\nexport PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin#g&quot; /etc/init.d/docker</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">service docker restart</span><br><span class="line"></span><br><span class="line">#查看版本</span><br><span class="line">ln -s /usr/local/bin/docker /usr/bin/docker</span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><h4 id="六、完成验证"><a href="#六、完成验证" class="headerlink" title="六、完成验证"></a>六、完成验证</h4><p><img src="https://i.loli.net/2019/07/16/5d2dd9440d37083556.png" alt></p><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li>安装步骤参考：<a href="http://www.senra.me/install-latest-docker-1703-ce-for-centos6/" target="_blank" rel="noopener">CentOS6 安装最新版Docker 17.03——自给自足，老树逢春</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前两天需要在Centos6上面封装docker镜像需要安装docker，但是发现在Centos6上安装docker只能安装docker-1-7-1版本。此版本推送镜像到harbor验证有问题，故需要升级docker版本到17-03-2-ce。&quot;&gt;&lt;a href=&quot;#前两天需要在Centos6上面封装docker镜像需要安装docker，但是发现在Centos6上安装docker只能安装docker-1-7-1版本。此版本推送镜像到harbor验证有问题，故需要升级docker版本到17-03-2-ce。&quot; class=&quot;headerlink&quot; title=&quot;前两天需要在Centos6上面封装docker镜像需要安装docker，但是发现在Centos6上安装docker只能安装docker 1.7.1版本。此版本推送镜像到harbor验证有问题，故需要升级docker版本到17.03.2-ce。&quot;&gt;&lt;/a&gt;前两天需要在Centos6上面封装docker镜像需要安装docker，但是发现在Centos6上安装docker只能安装docker 1.7.1版本。此版本推送镜像到harbor验证有问题，故需要升级docker版本到17.03.2-ce。&lt;/h4&gt;&lt;div class=&quot;tip&quot;&gt;特别注意,编译安装过程极度依赖梯子,否则安装很难成功!&lt;/div&gt;


&lt;h4 id=&quot;一、升级内核&quot;&gt;&lt;a href=&quot;#一、升级内核&quot; class=&quot;headerlink&quot; title=&quot;一、升级内核&quot;&gt;&lt;/a&gt;一、升级内核&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在centos6上安装docker17.03.2，需要先将内核升级到3.10版本(未考证?)，故直接安装最新稳定版内核&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rpm -Uvh http://www.elrepo.org/elrepo-release-6-8.el6.elrepo.noarch.rpm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install kernel-lt -y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sed -i &amp;apos;s/default=1/default=0/g&amp;apos; /etc/grub.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reboot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uname -sr  #Linux 4.4.185-1.el6.elrepo.x86_64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;二、安装依赖docker环境&quot;&gt;&lt;a href=&quot;#二、安装依赖docker环境&quot; class=&quot;headerlink&quot; title=&quot;二、安装依赖docker环境&quot;&gt;&lt;/a&gt;二、安装依赖docker环境&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;docker 17.03.2安装全部都是在docker里面完成的，故需要安装一个老版本的docker，才能编译安装17.03版本&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 安装1.7.1版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rpm -ivfh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install https://get.docker.com/rpm/1.7.1/centos-6/RPMS/x86_64/docker-engine-1.7.1-1.el6.x86_64.rpm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker version # version: 1.7.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#下载1.9.1然后替换&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl -sSL -O https://get.docker.com/builds/Linux/x86_64/docker-1.9.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chmod +x docker-1.9.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mv docker-1.9.1 /usr/bin/docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service docker restart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker version # version: 1.9.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DNS各类型互斥关系说明</title>
    <link href="http://messay.me/2019/07/14/DNS%E5%90%84%E7%B1%BB%E5%9E%8B%E4%BA%92%E6%96%A5%E5%85%B3%E7%B3%BB%E8%AF%B4%E6%98%8E/"/>
    <id>http://messay.me/2019/07/14/DNS各类型互斥关系说明/</id>
    <published>2019-07-14T14:34:42.000Z</published>
    <updated>2020-05-17T14:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前段时间完成了公司内部DNS解析平台的搭建，内里有许多坑，其中一个的就是DNS各种类型的互斥关系，简单说明如下。"><a href="#前段时间完成了公司内部DNS解析平台的搭建，内里有许多坑，其中一个的就是DNS各种类型的互斥关系，简单说明如下。" class="headerlink" title="前段时间完成了公司内部DNS解析平台的搭建，内里有许多坑，其中一个的就是DNS各种类型的互斥关系，简单说明如下。"></a>前段时间完成了公司内部DNS解析平台的搭建，内里有许多坑，其中一个的就是DNS各种类型的互斥关系，简单说明如下。</h4><h4 id="DNS有下列几种类型："><a href="#DNS有下列几种类型：" class="headerlink" title="DNS有下列几种类型："></a>DNS有下列几种类型：</h4><ul><li>A记录： 将域名指向一个IPv4地址（例如：100.100.100.100），需要增加A记录;</li><li>CNAME记录： 如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加CNAME记录。这个域名一般是主机服务商提供的一个域名;</li><li>MX记录： 建立电子邮箱服务，将指向邮件服务器地址，需要设置MX记录。建立邮箱时，一般会根据邮箱服务商提供的MX记录填写此记录;</li><li>NS记录： 域名解析服务器记录，如果要将子域名指定某个域名服务器来解析，需要设置NS记录;</li><li>TXT记录： 可任意填写，可为空。一般做一些验证记录时会使用此项，如：做SPF（反垃圾邮件）记录;</li><li>AAAA记录： 将主机名（或域名）指向一个IPv6地址（例如：ff03:0:0:0:0:0:0:c1），需要添加AAAA记录;</li><li>SRV记录： 添加服务记录服务器服务记录时会添加此项，SRV记录了哪台计算机提供了哪个服务。格式为：服务的名字.协议的类型（例如：_example-server._tcp）;</li><li>SOA记录： SOA叫做起始授权机构记录，NS用于标识多台域名解析服务器，SOA记录用于在众多NS记录中那一台是主服务器;</li><li>PTR记录： PTR记录是A记录的逆向记录，又称做IP反查记录或指针记录，负责将IP反向解析为域名;</li><li>显性URL转发记录： 将域名指向一个http(s)协议地址，访问域名时，自动跳转至目标地址。例如：将<a href="http://www.liuht.cn显性转发到www.itbilu.com后，访问www.liuht.cn时，地址栏显示的地址为：www.itbilu.com" target="_blank" rel="noopener">www.liuht.cn显性转发到www.itbilu.com后，访问www.liuht.cn时，地址栏显示的地址为：www.itbilu.com</a>;</li><li>隐性UR转发记录L： 将域名指向一个http(s)协议地址，访问域名时，自动跳转至目标地址，隐性转发会隐藏真实的目标地址。例如：将<a href="http://www.liuht.cn显性转发到www.itbilu.com后，访问www.liuht.cn时，地址栏显示的地址仍然是：www.liuht.cn" target="_blank" rel="noopener">www.liuht.cn显性转发到www.itbilu.com后，访问www.liuht.cn时，地址栏显示的地址仍然是：www.liuht.cn</a>;</li></ul><a id="more"></a><h4 id="互斥关系说明："><a href="#互斥关系说明：" class="headerlink" title="互斥关系说明："></a>互斥关系说明：</h4><ul><li>任何类型的主机记录，都不能与cname类型的主机记录冲突；NS类型的主机记录自身不冲突，但与其他记录都冲突(主机记录为@除外)；A,MX,TXT类型的主机记录自身不冲突；</li><li>A类型记录值只能为ip地址，CNAME类型记录值只能为域名，NS类型记录值和TXT类型记录值可以为任意值，MX类型记录值只能为ip地址和域名</li><li>TXT主机记录可以有特殊字符（格式为域名），其他类型的主机记录不能有特殊字符;</li></ul><p><img src="https://i.loli.net/2019/07/14/5d2b4143883dd49976.jpg" alt="记录类型互斥关系图.jpg"></p><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li>DNS类型参考：<a href="https://itbilu.com/other/relate/EyxzdVl3.html" target="_blank" rel="noopener">https://itbilu.com/other/relate/EyxzdVl3.html</a></li><li>互斥图参考：<a href="https://www.cloudxns.net/Support/detail/id/20.html" target="_blank" rel="noopener">https://www.cloudxns.net/Support/detail/id/20.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前段时间完成了公司内部DNS解析平台的搭建，内里有许多坑，其中一个的就是DNS各种类型的互斥关系，简单说明如下。&quot;&gt;&lt;a href=&quot;#前段时间完成了公司内部DNS解析平台的搭建，内里有许多坑，其中一个的就是DNS各种类型的互斥关系，简单说明如下。&quot; class=&quot;headerlink&quot; title=&quot;前段时间完成了公司内部DNS解析平台的搭建，内里有许多坑，其中一个的就是DNS各种类型的互斥关系，简单说明如下。&quot;&gt;&lt;/a&gt;前段时间完成了公司内部DNS解析平台的搭建，内里有许多坑，其中一个的就是DNS各种类型的互斥关系，简单说明如下。&lt;/h4&gt;&lt;h4 id=&quot;DNS有下列几种类型：&quot;&gt;&lt;a href=&quot;#DNS有下列几种类型：&quot; class=&quot;headerlink&quot; title=&quot;DNS有下列几种类型：&quot;&gt;&lt;/a&gt;DNS有下列几种类型：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;A记录： 将域名指向一个IPv4地址（例如：100.100.100.100），需要增加A记录;&lt;/li&gt;
&lt;li&gt;CNAME记录： 如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加CNAME记录。这个域名一般是主机服务商提供的一个域名;&lt;/li&gt;
&lt;li&gt;MX记录： 建立电子邮箱服务，将指向邮件服务器地址，需要设置MX记录。建立邮箱时，一般会根据邮箱服务商提供的MX记录填写此记录;&lt;/li&gt;
&lt;li&gt;NS记录： 域名解析服务器记录，如果要将子域名指定某个域名服务器来解析，需要设置NS记录;&lt;/li&gt;
&lt;li&gt;TXT记录： 可任意填写，可为空。一般做一些验证记录时会使用此项，如：做SPF（反垃圾邮件）记录;&lt;/li&gt;
&lt;li&gt;AAAA记录： 将主机名（或域名）指向一个IPv6地址（例如：ff03:0:0:0:0:0:0:c1），需要添加AAAA记录;&lt;/li&gt;
&lt;li&gt;SRV记录： 添加服务记录服务器服务记录时会添加此项，SRV记录了哪台计算机提供了哪个服务。格式为：服务的名字.协议的类型（例如：_example-server._tcp）;&lt;/li&gt;
&lt;li&gt;SOA记录： SOA叫做起始授权机构记录，NS用于标识多台域名解析服务器，SOA记录用于在众多NS记录中那一台是主服务器;&lt;/li&gt;
&lt;li&gt;PTR记录： PTR记录是A记录的逆向记录，又称做IP反查记录或指针记录，负责将IP反向解析为域名;&lt;/li&gt;
&lt;li&gt;显性URL转发记录： 将域名指向一个http(s)协议地址，访问域名时，自动跳转至目标地址。例如：将&lt;a href=&quot;http://www.liuht.cn显性转发到www.itbilu.com后，访问www.liuht.cn时，地址栏显示的地址为：www.itbilu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.liuht.cn显性转发到www.itbilu.com后，访问www.liuht.cn时，地址栏显示的地址为：www.itbilu.com&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;隐性UR转发记录L： 将域名指向一个http(s)协议地址，访问域名时，自动跳转至目标地址，隐性转发会隐藏真实的目标地址。例如：将&lt;a href=&quot;http://www.liuht.cn显性转发到www.itbilu.com后，访问www.liuht.cn时，地址栏显示的地址仍然是：www.liuht.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.liuht.cn显性转发到www.itbilu.com后，访问www.liuht.cn时，地址栏显示的地址仍然是：www.liuht.cn&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://messay.me/2019/07/14/test/"/>
    <id>http://messay.me/2019/07/14/test/</id>
    <published>2019-07-14T14:27:42.000Z</published>
    <updated>2020-05-17T14:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="test-blog-update"><a href="#test-blog-update" class="headerlink" title="test blog update"></a>test blog update</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;test-blog-update&quot;&gt;&lt;a href=&quot;#test-blog-update&quot; class=&quot;headerlink&quot; title=&quot;test blog update&quot;&gt;&lt;/a&gt;test blog update&lt;/h4&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ubuntu dns显示为127.0.0.1的处理办法</title>
    <link href="http://messay.me/2018/07/04/ubuntu-dns%E6%98%BE%E7%A4%BA%E4%B8%BA127-0-0-1%E7%9A%84%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95/"/>
    <id>http://messay.me/2018/07/04/ubuntu-dns显示为127-0-0-1的处理办法/</id>
    <published>2018-07-04T13:23:14.000Z</published>
    <updated>2020-05-17T14:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="新装一台Ubuntu虚拟机测试dhcp服务器，发现ubuntu的dns显示为：127-0-0-1。有点疑惑，google之，找到原因。"><a href="#新装一台Ubuntu虚拟机测试dhcp服务器，发现ubuntu的dns显示为：127-0-0-1。有点疑惑，google之，找到原因。" class="headerlink" title="新装一台Ubuntu虚拟机测试dhcp服务器，发现ubuntu的dns显示为：127.0.0.1。有点疑惑，google之，找到原因。"></a>新装一台Ubuntu虚拟机测试dhcp服务器，发现ubuntu的dns显示为：127.0.0.1。有点疑惑，google之，找到原因。</h4><ul><li><p>ubuntu下有一个本地的dns服务叫做dnsmasq，它是由NetworkManager控制的</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep dnsmasq</span><br></pre></td></tr></table></figure></li><li><p>执行上面命令，你就可以看到它监听的本地地址，<strong>–listen-address=127.0.1.1</strong> (ubuntu12.04及之前的版本 是 127.0.0.1)， 这个地址是一个本地回环地址，而你真实的dns服务器地址，是被这个服务管理维护着的，管理方式如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local process -&gt; local dnsmasq -&gt; router -&gt; ISP dns</span><br></pre></td></tr></table></figure></li><li><p>若需要看到真实的DNS地址，可以这么做：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/NetworkManager/NetworkManager.conf</span><br><span class="line">[main]</span><br><span class="line">plugins=ifupdown,keyfile,ofono</span><br><span class="line">#dns=dnsmasq // 注释此行</span><br><span class="line"></span><br><span class="line">sudo service network-manager restart</span><br><span class="line"></span><br><span class="line">nslookup baidu.com</span><br><span class="line">Server:         192.168.20.21</span><br><span class="line">Address:        192.168.20.21#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:   baidu.com</span><br><span class="line">Address: 220.181.57.216</span><br><span class="line">Name:   baidu.com</span><br><span class="line">Address: 123.125.115.110</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>如果没有nslookup命令，那么你需要安装<strong>bind-utils</strong> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install bind-utils</span><br></pre></td></tr></table></figure></li></ul><h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><ul><li><a href="https://segmentfault.com/q/1010000002443769" target="_blank" rel="noopener">ubuntu中 etc resolv.cnf中的127.0.1.1是什么地址</a></li><li><a href="https://askubuntu.com/questions/915243/connection-info-shows-correct-dns-but-resolvconf-does-not-show-the-same" target="_blank" rel="noopener">Connection info shows correct DNS but resolvconf does not show the same</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;新装一台Ubuntu虚拟机测试dhcp服务器，发现ubuntu的dns显示为：127-0-0-1。有点疑惑，google之，找到原因。&quot;&gt;&lt;a href=&quot;#新装一台Ubuntu虚拟机测试dhcp服务器，发现ubuntu的dns显示为：127-0-0-1。有点疑惑，google之，找到原因。&quot; class=&quot;headerlink&quot; title=&quot;新装一台Ubuntu虚拟机测试dhcp服务器，发现ubuntu的dns显示为：127.0.0.1。有点疑惑，google之，找到原因。&quot;&gt;&lt;/a&gt;新装一台Ubuntu虚拟机测试dhcp服务器，发现ubuntu的dns显示为：127.0.0.1。有点疑惑，google之，找到原因。&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ubuntu下有一个本地的dns服务叫做dnsmasq，它是由NetworkManager控制的&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ps -ef | grep dnsmasq&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行上面命令，你就可以看到它监听的本地地址，&lt;strong&gt;–listen-address=127.0.1.1&lt;/strong&gt; (ubuntu12.04及之前的版本 是 127.0.0.1)， 这个地址是一个本地回环地址，而你真实的dns服务器地址，是被这个服务管理维护着的，管理方式如下：&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;local process -&amp;gt; local dnsmasq -&amp;gt; router -&amp;gt; ISP dns&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若需要看到真实的DNS地址，可以这么做：&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vi /etc/NetworkManager/NetworkManager.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plugins=ifupdown,keyfile,ofono&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#dns=dnsmasq // 注释此行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo service network-manager restart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nslookup baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server:         192.168.20.21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Address:        192.168.20.21#53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Non-authoritative answer:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Name:   baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Address: 220.181.57.216&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Name:   baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Address: 123.125.115.110&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kubernetes强制删除一直处于Terminating状态的pod，namespace</title>
    <link href="http://messay.me/2018/06/26/Kubernetes%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4%E4%B8%80%E7%9B%B4%E5%A4%84%E4%BA%8ETerminating%E7%8A%B6%E6%80%81%E7%9A%84pod%EF%BC%8Cnamespace/"/>
    <id>http://messay.me/2018/06/26/Kubernetes强制删除一直处于Terminating状态的pod，namespace/</id>
    <published>2018-06-26T14:58:03.000Z</published>
    <updated>2020-05-17T14:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="手动搭建的Kubernetes，使用原生的Dashboard，感觉不舒服，于是使用Rancher2-0代理了Kubernetes的管理web页面。因未知原因，Rancher服务无法启用，删除Rancher依赖的namespace（cattle-system），状态一直是Terminating。此为背景。"><a href="#手动搭建的Kubernetes，使用原生的Dashboard，感觉不舒服，于是使用Rancher2-0代理了Kubernetes的管理web页面。因未知原因，Rancher服务无法启用，删除Rancher依赖的namespace（cattle-system），状态一直是Terminating。此为背景。" class="headerlink" title="手动搭建的Kubernetes，使用原生的Dashboard，感觉不舒服，于是使用Rancher2.0代理了Kubernetes的管理web页面。因未知原因，Rancher服务无法启用，删除Rancher依赖的namespace（cattle-system），状态一直是Terminating。此为背景。"></a>手动搭建的Kubernetes，使用原生的Dashboard，感觉不舒服，于是使用Rancher2.0代理了Kubernetes的管理web页面。因未知原因，Rancher服务无法启用，删除Rancher依赖的namespace（cattle-system），状态一直是Terminating。此为背景。</h4><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ol><li>可使用kubectl中的强制删除命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除POD</span><br><span class="line">kubectl delete pod PODNAME --force --grace-period=0</span><br><span class="line"></span><br><span class="line"># 删除NAMESPACE</span><br><span class="line">kubectl delete namespace NAMESPACENAME --force --grace-period=0</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li>若以上方法无法删除，可使用第二种方法，直接从ETCD中删除源数据(<strong>这是一种最暴力的方式，我们不建议直接操作etcd中的数据，在操作前请确认知道你是在做什么。</strong>)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除default namespace下的pod名为pod-to-be-deleted-0</span><br><span class="line">ETCDCTL_API=3 etcdctl del /registry/pods/default/pod-to-be-deleted-0</span><br><span class="line"></span><br><span class="line"># 删除需要删除的NAMESPACE</span><br><span class="line">etcdctl del /registry/namespaces/NAMESPACENAME</span><br></pre></td></tr></table></figure></li></ol><h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><ul><li><a href="https://jimmysong.io/kubernetes-handbook/appendix/tricks.html" target="_blank" rel="noopener">Kubernetes使用技巧</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;手动搭建的Kubernetes，使用原生的Dashboard，感觉不舒服，于是使用Rancher2-0代理了Kubernetes的管理web页面。因未知原因，Rancher服务无法启用，删除Rancher依赖的namespace（cattle-system），状态一直是Terminating。此为背景。&quot;&gt;&lt;a href=&quot;#手动搭建的Kubernetes，使用原生的Dashboard，感觉不舒服，于是使用Rancher2-0代理了Kubernetes的管理web页面。因未知原因，Rancher服务无法启用，删除Rancher依赖的namespace（cattle-system），状态一直是Terminating。此为背景。&quot; class=&quot;headerlink&quot; title=&quot;手动搭建的Kubernetes，使用原生的Dashboard，感觉不舒服，于是使用Rancher2.0代理了Kubernetes的管理web页面。因未知原因，Rancher服务无法启用，删除Rancher依赖的namespace（cattle-system），状态一直是Terminating。此为背景。&quot;&gt;&lt;/a&gt;手动搭建的Kubernetes，使用原生的Dashboard，感觉不舒服，于是使用Rancher2.0代理了Kubernetes的管理web页面。因未知原因，Rancher服务无法启用，删除Rancher依赖的namespace（cattle-system），状态一直是Terminating。此为背景。&lt;/h4&gt;&lt;h4 id=&quot;解决方法：&quot;&gt;&lt;a href=&quot;#解决方法：&quot; class=&quot;headerlink&quot; title=&quot;解决方法：&quot;&gt;&lt;/a&gt;解决方法：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;可使用kubectl中的强制删除命令&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 删除POD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubectl delete pod PODNAME --force --grace-period=0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 删除NAMESPACE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubectl delete namespace NAMESPACENAME --force --grace-period=0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>kubernetes介绍</title>
    <link href="http://messay.me/2018/06/13/kubernetes%E4%BB%8B%E7%BB%8D/"/>
    <id>http://messay.me/2018/06/13/kubernetes介绍/</id>
    <published>2018-06-13T13:57:19.000Z</published>
    <updated>2020-05-17T14:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="初步介绍"><a href="#初步介绍" class="headerlink" title="初步介绍:"></a>初步介绍:</h4><ul><li>Kubernetes是Google开源的容器集群管理系统，其提供应用部署、维护、 扩展机制等功能，利用Kubernetes能方便地管理跨机器运行容器化的应用，其主要功能如下：<ol><li>使用Docker对应用程序包装(package)、实例化(instantiate)、运行(run)。</li><li>以集群的方式运行、管理跨机器的容器。</li><li>解决Docker跨机器容器之间的通讯问题。</li><li>Kubernetes的自我修复机制使得容器集群总是运行在用户期望的状态。</li></ol></li></ul><h4 id="Kubernetes主要概念"><a href="#Kubernetes主要概念" class="headerlink" title="Kubernetes主要概念:"></a>Kubernetes主要概念:</h4><ol><li>Node：是kubernetes集群的工作负载节点。Master为其分配工作，当某个Node宕机时，Master会将其工作负载自动转移到其他节点。</li><li>Pods：Pod是Kubernetes的基本操作单元，把相关的一个或多个容器构成一个Pod，通常Pod里的容器运行相同的应用。Pod包含的容器运行在同一个Minion(Host)上，看作一个统一管理单元，共享相同的volumes和network namespace/IP和Port空间。Kubernetes为每个Pod都分配了唯一的IP地址，称之为PodIP，一个Pod里的多个容器共享PodIP地址。</li><li>Services：Services也是Kubernetes的基本操作单元，是真实应用服务的抽象，每一个服务后面都有很多对应的容器来支持，通过Proxy的port和服务selector决定服务请求传递给后端提供服务的容器，对外表现为一个单一访问接口，外部不需要了解后端如何运行，这给扩展或维护后端带来很大的好处。</li><li>Replication Controllers(副本控制器)：Replication Controller确保任何时候Kubernetes集群中有指定数量的pod副本(replicas)在运行， 如果少于指定数量的pod副本(replicas)，Replication Controller会启动新的Container，反之会杀死多余的以保证数量不变。Replication Controller使用预先定义的pod模板创建pods，一旦创建成功，pod 模板和创建的pods没有任何关联，可以修改pod模板而不会对已创建pods有任何影响，也可以直接更新通过Replication Controller创建的pods。对于利用pod模板创建的pods，Replication Controller根据label selector来关联，通过修改pods的label可以删除对应的pods。</li><li>Namespace: 命名空间为Kubernetes集群提供虚拟的隔离作用，Kubernetes集群初始有两个命名空间，分别是默认命名空间default和系统命名空间kube-system，除此以外，管理员可以可以创建新的命名空间满足需要。</li><li>Volume：Kubernetes的存储卷的生命周期和作用范围是一个Pod。每个Pod中声明的存储卷由Pod中的所有容器共享。Kubernetes支持非常多的存储卷类型，特别的，支持多种公有云平台的存储，包括AWS，Google和Azure云；支持多种分布式存储包括GlusterFS和Ceph；也支持较容易使用的主机本地目录hostPath和NFS。</li></ol><a id="more"></a><h4 id="Kubernetes主要构件"><a href="#Kubernetes主要构件" class="headerlink" title="Kubernetes主要构件:"></a>Kubernetes主要构件:</h4><h4 id="Master："><a href="#Master：" class="headerlink" title="Master："></a>Master：</h4><ol><li>Kubernetes API Server:作为Kubernetes系统的入口，其封装了核心对象的增删改查操作，以RESTful API接口方式提供给外部客户和内部组件调用。维护的REST对象持久化到Etcd中存储。</li><li>Kubernetes Scheduler:为新建立的Pod进行节点(node)选择(即分配机器)，负责集群的资源调度。组件抽离，可以方便替换成其他调度器。</li><li>Kubernetes Controller负责执行各种控制器，目前已经提供了很多控制器来保证Kubernetes的正常运行。</li></ol><p><img src="https://img-blog.csdn.net/20170108144418224" alt></p><h4 id="Node"><a href="#Node" class="headerlink" title="Node:"></a>Node:</h4><ol><li>Kubelet：主要包含容器管理，镜像管理，Volume管理等。同时kubelet也是一个rest服务，和pod相关的命令操作都是通过调用接口实现的.Kubelet会从Kubernetes API Server接收Pod的创建请求，启动和停止容器，监控容器运行状态并汇报给Kubernetes API Server。</li><li>Kube-proxy：负责为Pod创建代理服务，Kubernetes Proxy会从Kubernetes API Server获取所有的Service信息，并根据Service的信息创建代理服务，实现Service到Pod的请求路由和转发，从而实现Kubernetes层级的虚拟转发网络。用于实现Kubernetes的service机制。提供一部分SDN功能以及集群内部的智能LoadBalancer</li><li>Docker：Node上需要运行容器服务<br><img src="https://img-blog.csdn.net/20170108144528246" alt></li></ol><h4 id="Etcd：一款分布式的一致性KV存储，主要用于共享配置和服务发现"><a href="#Etcd：一款分布式的一致性KV存储，主要用于共享配置和服务发现" class="headerlink" title="Etcd：一款分布式的一致性KV存储，主要用于共享配置和服务发现"></a>Etcd：一款分布式的一致性KV存储，主要用于共享配置和服务发现</h4><ol><li>作为配置中心和存储服务，保存了所有组件的定义以及状态，Kubernetes的多个组件之间的互相交互也主要通过etcd。在k8s中，所有数据的存储以及操作记录都在etcd中进行存储，所以对于k8s集群来说，etcd是相当重要的，一旦故障，可能导致整个集群的瘫痪或者数据丢失。</li><li>网络插件flannel、对于其它网络插件需要用到etcd存储网络的配置信息</li><li>kubernetes本身，包括各种对象的状态和元信息配置</li></ol><h4 id="Kubectl"><a href="#Kubectl" class="headerlink" title="Kubectl"></a>Kubectl</h4><ol><li>通过客户端的kubectl命令集操作，API Server响应对应的命令结果，从而达到对kubernetes集群的管理。</li></ol><h4 id="主流网络插件介绍"><a href="#主流网络插件介绍" class="headerlink" title="主流网络插件介绍"></a>主流网络插件介绍</h4><ul><li><p>flannel：flannel是coreos为k8s设计的一个非常简洁的多节点3层容器网络互联方案。</p><ol><li>flannel旨在解决不同host上的容器网络互联问题，大致原理是每个 host 分配一个 subnet，容器从此 subnet 中分配 IP，这些 IP 可以在 host 间路由，容器间无需 NAT 和 port mapping 就可以跨主机通信。每个 subnet 都是从一个更大的 IP 池中划分的，flannel 会在每个主机上运行一个叫 flanneld 的 agent，其职责就是从池子中分配 subnet。为了在各个主机间共享信息，flannel 用 etcd（如果是k8s集群会直接调用k8s api）存放网络配置、已分配的 subnet、host 的 IP 等信息。节点间的通信有以下多种backen支持。</li><li>VXLAN：推荐配置，利用内核级别的VXLAN来封装host之间传送的包。<br>host-gw：对于性能有要求的推荐配置，但是不支持云环境。通过在host的路由表中直接创建到其他主机 subnet 的路由条目，从而实现容器跨主机通信。要求所有host在二层互联。</li><li>udp：默认模式，通常用于debug，或以上两种条件都不具备。<br><img src="http://www.youruncloud.com/uploadFiles/images/11(3" alt>.png)</li></ol></li><li><p>calico：calico是一个比较完整的项目，专为云环境设置，且比较注重安全性，也就是网络隔离，ACL控制等都是可以实现。</p><ol><li>calico是一个纯三层的数据中心网络方案，实现类似于flannel host-gw,不过它没有复用docker 的docker0 bridge，而是自己实现的。</li><li>Calico在每一个计算节点利用Linux Kernel实现了一个高效的vRouter来负责数据转发，而每个vRouter通过BGP协议负责把自己上运行的workload的路由信息像整个Calico网络内传播——小规模部署可以直接互联，大规模下可通过指定的BGP route reflector来完成。</li><li>Calico基于iptables还提供了丰富而灵活的网络Policy，保证通过各个节点上的ACLs来提供Workload的多租户隔离、安全组以及其他可达性限制等功能。</li><li>对于有IP限制的host，也可以使用calico的IPIP方案（overlay方式）。<br><img src="http://oeptotikb.bkt.clouddn.com/20171212-calico-arch.jpg" alt></li></ol></li></ul><h4 id="整体系统架构图"><a href="#整体系统架构图" class="headerlink" title="整体系统架构图"></a>整体系统架构图</h4><p><img src="https://raw.githubusercontent.com/kubernetes/kubernetes/release-1.2/docs/design/architecture.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;初步介绍&quot;&gt;&lt;a href=&quot;#初步介绍&quot; class=&quot;headerlink&quot; title=&quot;初步介绍:&quot;&gt;&lt;/a&gt;初步介绍:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Kubernetes是Google开源的容器集群管理系统，其提供应用部署、维护、 扩展机制等功能，利用Kubernetes能方便地管理跨机器运行容器化的应用，其主要功能如下：&lt;ol&gt;
&lt;li&gt;使用Docker对应用程序包装(package)、实例化(instantiate)、运行(run)。&lt;/li&gt;
&lt;li&gt;以集群的方式运行、管理跨机器的容器。&lt;/li&gt;
&lt;li&gt;解决Docker跨机器容器之间的通讯问题。&lt;/li&gt;
&lt;li&gt;Kubernetes的自我修复机制使得容器集群总是运行在用户期望的状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Kubernetes主要概念&quot;&gt;&lt;a href=&quot;#Kubernetes主要概念&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes主要概念:&quot;&gt;&lt;/a&gt;Kubernetes主要概念:&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Node：是kubernetes集群的工作负载节点。Master为其分配工作，当某个Node宕机时，Master会将其工作负载自动转移到其他节点。&lt;/li&gt;
&lt;li&gt;Pods：Pod是Kubernetes的基本操作单元，把相关的一个或多个容器构成一个Pod，通常Pod里的容器运行相同的应用。Pod包含的容器运行在同一个Minion(Host)上，看作一个统一管理单元，共享相同的volumes和network namespace/IP和Port空间。Kubernetes为每个Pod都分配了唯一的IP地址，称之为PodIP，一个Pod里的多个容器共享PodIP地址。&lt;/li&gt;
&lt;li&gt;Services：Services也是Kubernetes的基本操作单元，是真实应用服务的抽象，每一个服务后面都有很多对应的容器来支持，通过Proxy的port和服务selector决定服务请求传递给后端提供服务的容器，对外表现为一个单一访问接口，外部不需要了解后端如何运行，这给扩展或维护后端带来很大的好处。&lt;/li&gt;
&lt;li&gt;Replication Controllers(副本控制器)：Replication Controller确保任何时候Kubernetes集群中有指定数量的pod副本(replicas)在运行， 如果少于指定数量的pod副本(replicas)，Replication Controller会启动新的Container，反之会杀死多余的以保证数量不变。Replication Controller使用预先定义的pod模板创建pods，一旦创建成功，pod 模板和创建的pods没有任何关联，可以修改pod模板而不会对已创建pods有任何影响，也可以直接更新通过Replication Controller创建的pods。对于利用pod模板创建的pods，Replication Controller根据label selector来关联，通过修改pods的label可以删除对应的pods。&lt;/li&gt;
&lt;li&gt;Namespace: 命名空间为Kubernetes集群提供虚拟的隔离作用，Kubernetes集群初始有两个命名空间，分别是默认命名空间default和系统命名空间kube-system，除此以外，管理员可以可以创建新的命名空间满足需要。&lt;/li&gt;
&lt;li&gt;Volume：Kubernetes的存储卷的生命周期和作用范围是一个Pod。每个Pod中声明的存储卷由Pod中的所有容器共享。Kubernetes支持非常多的存储卷类型，特别的，支持多种公有云平台的存储，包括AWS，Google和Azure云；支持多种分布式存储包括GlusterFS和Ceph；也支持较容易使用的主机本地目录hostPath和NFS。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Centos&amp;Ubuntu安装Docker-17.03.02版本问题及解决</title>
    <link href="http://messay.me/2018/06/07/Centos-Ubuntu%E5%AE%89%E8%A3%85Docker-17-03-02%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    <id>http://messay.me/2018/06/07/Centos-Ubuntu安装Docker-17-03-02版本问题及解决/</id>
    <published>2018-06-07T14:45:58.000Z</published>
    <updated>2020-05-17T14:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最近在尝试容器化的项目，使用rancher部署kubernetes，奈何kubernetes1-8只支持特定的版本（1-12-6，1-13-1，17-03-02），此为前提。"><a href="#最近在尝试容器化的项目，使用rancher部署kubernetes，奈何kubernetes1-8只支持特定的版本（1-12-6，1-13-1，17-03-02），此为前提。" class="headerlink" title="最近在尝试容器化的项目，使用rancher部署kubernetes，奈何kubernetes1.8只支持特定的版本（1.12.6，1.13.1，17.03.02），此为前提。"></a>最近在尝试容器化的项目，使用rancher部署kubernetes，奈何kubernetes1.8只支持特定的版本（1.12.6，1.13.1，17.03.02），此为前提。</h4><h4 id="Centos安装部署-此Centos版本为7-："><a href="#Centos安装部署-此Centos版本为7-：" class="headerlink" title="Centos安装部署(此Centos版本为7+)："></a>Centos安装部署(此Centos版本为7+)：</h4><ul><li><p>目前docker版本已更新为18.05.0-ce，17.03.02建议手动安装。</p></li><li><p>手动安装17.03.02，需先安装<strong>docker-ce-selinux-17.03.2.ce</strong>，要不会报error，无法安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>安装完成后可安装17.03.02。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-17.03.0.ce-1.el7.centos.x86_64.rpm</span><br></pre></td></tr></table></figure></li><li><p><strong>你也可以直接使用国内yum安装(推荐)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">https://download.daocloud.io/docker/linux/centos/docker-ce.repo</span><br><span class="line">sudo yum install -y -q --setopt=obsoletes=0 docker-ce-17.03.2.ce* docker-ce-selinux-17.03.2.ce*</span><br><span class="line">sudo systemctl enable docker</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo service docker status</span><br></pre></td></tr></table></figure></li></ul><h4 id="Ubuntu安装部署"><a href="#Ubuntu安装部署" class="headerlink" title="Ubuntu安装部署"></a>Ubuntu安装部署</h4><ul><li>直接使用国内源安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">apt-transport-https \</span><br><span class="line">ca-certificates \</span><br><span class="line">curl \</span><br><span class="line">software-properties-common</span><br><span class="line">curl -fsSL https://download.daocloud.io/docker/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">&quot;deb [arch=$(dpkg --print-architecture)] https://download.daocloud.io/docker/linux/ubuntu \</span><br><span class="line">$(lsb_release -cs) \</span><br><span class="line">stable&quot;</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y -q docker-ce=17.03.2*</span><br><span class="line">sudo service docker start</span><br><span class="line">sudo service docker status</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h4 id="服务检查"><a href="#服务检查" class="headerlink" title="服务检查"></a>服务检查</h4><ul><li><p>检查docker是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker #建立docker组</span><br><span class="line">sudo usermod -aG docker $USER # 加入docker组</span><br><span class="line"># 退出当前终端并重新登录，进行如下测试</span><br><span class="line">docker version</span><br><span class="line">docker info</span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure></li><li><p>手动安装需要增加开机自启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure></li></ul><h4 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h4><ul><li>国内大家都懂的原因，添加阿里云的镜像加速器。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://yourself.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li></ul><p><strong>一点怨念：国内大多数博客教程（互相抄？）都是让你添加docker的官方源来安装17.03.02，也不知道是到底有没有测试。目前的网络环境来说，docker官方源是很难连上的，当然你走代理另说。善用google，禁用百度。</strong></p><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li><a href="https://blog.csdn.net/CSDN_duomaomao/article/details/79019764" target="_blank" rel="noopener">https://blog.csdn.net/CSDN_duomaomao/article/details/79019764</a></li><li><a href="http://www.showerlee.com/archives/2200" target="_blank" rel="noopener">http://www.showerlee.com/archives/2200</a></li><li><a href="http://jasmine-abbs.com/docker-daemon/" target="_blank" rel="noopener">http://jasmine-abbs.com/docker-daemon/</a></li><li><a href="http://guide.daocloud.io/dce/docker-10592690.html" target="_blank" rel="noopener">安装 Docker</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;最近在尝试容器化的项目，使用rancher部署kubernetes，奈何kubernetes1-8只支持特定的版本（1-12-6，1-13-1，17-03-02），此为前提。&quot;&gt;&lt;a href=&quot;#最近在尝试容器化的项目，使用rancher部署kubernetes，奈何kubernetes1-8只支持特定的版本（1-12-6，1-13-1，17-03-02），此为前提。&quot; class=&quot;headerlink&quot; title=&quot;最近在尝试容器化的项目，使用rancher部署kubernetes，奈何kubernetes1.8只支持特定的版本（1.12.6，1.13.1，17.03.02），此为前提。&quot;&gt;&lt;/a&gt;最近在尝试容器化的项目，使用rancher部署kubernetes，奈何kubernetes1.8只支持特定的版本（1.12.6，1.13.1，17.03.02），此为前提。&lt;/h4&gt;&lt;h4 id=&quot;Centos安装部署-此Centos版本为7-：&quot;&gt;&lt;a href=&quot;#Centos安装部署-此Centos版本为7-：&quot; class=&quot;headerlink&quot; title=&quot;Centos安装部署(此Centos版本为7+)：&quot;&gt;&lt;/a&gt;Centos安装部署(此Centos版本为7+)：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;目前docker版本已更新为18.05.0-ce，17.03.02建议手动安装。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;手动安装17.03.02，需先安装&lt;strong&gt;docker-ce-selinux-17.03.2.ce&lt;/strong&gt;，要不会报error，无法安装。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo yum install -y https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch.rpm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装完成后可安装17.03.02。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo yum install -y https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-17.03.0.ce-1.el7.centos.x86_64.rpm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;你也可以直接使用国内yum安装(推荐)&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo yum install -y yum-utils&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo yum-config-manager \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--add-repo \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;https://download.daocloud.io/docker/linux/centos/docker-ce.repo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo yum install -y -q --setopt=obsoletes=0 docker-ce-17.03.2.ce* docker-ce-selinux-17.03.2.ce*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo systemctl enable docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo systemctl start docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo service docker status&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Ubuntu安装部署&quot;&gt;&lt;a href=&quot;#Ubuntu安装部署&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu安装部署&quot;&gt;&lt;/a&gt;Ubuntu安装部署&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;直接使用国内源安装&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install -y \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apt-transport-https \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ca-certificates \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;software-properties-common&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl -fsSL https://download.daocloud.io/docker/linux/ubuntu/gpg | sudo apt-key add -&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo add-apt-repository \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;deb [arch=$(dpkg --print-architecture)] https://download.daocloud.io/docker/linux/ubuntu \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(lsb_release -cs) \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stable&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install -y -q docker-ce=17.03.2*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo service docker start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo service docker status&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>终端+git设置代理联网</title>
    <link href="http://messay.me/2018/05/30/%E7%BB%88%E7%AB%AF-git%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E8%81%94%E7%BD%91/"/>
    <id>http://messay.me/2018/05/30/终端-git设置代理联网/</id>
    <published>2018-05-30T15:45:25.000Z</published>
    <updated>2020-05-17T14:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="天朝的网络环境对技术人员实在是不友好，还好ShadowsocksX-NG已支持sock5，http两种代理协议。"><a href="#天朝的网络环境对技术人员实在是不友好，还好ShadowsocksX-NG已支持sock5，http两种代理协议。" class="headerlink" title="天朝的网络环境对技术人员实在是不友好，还好ShadowsocksX-NG已支持sock5，http两种代理协议。"></a>天朝的网络环境对技术人员实在是不友好，还好ShadowsocksX-NG已支持sock5，http两种代理协议。</h4><h4 id="设置终端代理"><a href="#设置终端代理" class="headerlink" title="设置终端代理"></a>设置终端代理</h4><ul><li>在 .bashrc 或 .zshrc 中设置如下内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#sock代理</span><br><span class="line">alias setproxy=&quot;export ALL_PROXY=socks5://127.0.0.1:1080&quot;</span><br><span class="line">alias unsetproxy=&quot;unset ALL_PROXY&quot;</span><br><span class="line"></span><br><span class="line">#http代理</span><br><span class="line">alias setproxy=&quot;export ALL_PROXY=http://127.0.0.1:8035&quot;</span><br><span class="line">alias unsetproxy=&quot;unset ALL_PROXY&quot;</span><br><span class="line"></span><br><span class="line">#测试</span><br><span class="line">curl ip.cn</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h4 id="设置git代理"><a href="#设置git代理" class="headerlink" title="设置git代理"></a>设置git代理</h4><ul><li>可以编辑~/.gitconfig或者直接执行下面命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#sock代理</span><br><span class="line">git config --global http.proxy &apos;socks5://127.0.0.1:1080&apos; </span><br><span class="line">git config --global https.proxy &apos;socks5://127.0.0.1:1080&apos;</span><br><span class="line"></span><br><span class="line">#http代理</span><br><span class="line">git config --global http.proxy &quot;http://127.0.0.1:8035&quot;</span><br><span class="line">git config --global https.proxy &quot;http://127.0.0.1:8035&quot;</span><br><span class="line"></span><br><span class="line">#取消设置</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure></li></ul><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li><a href="https://blog.kelu.org/tech/2017/06/19/setting-socks5-proxy.html" target="_blank" rel="noopener">设置 socks5/http 代理，可用于git和shell终端</a></li><li><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases" target="_blank" rel="noopener">ShadowsocksX-NG下载</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;天朝的网络环境对技术人员实在是不友好，还好ShadowsocksX-NG已支持sock5，http两种代理协议。&quot;&gt;&lt;a href=&quot;#天朝的网络环境对技术人员实在是不友好，还好ShadowsocksX-NG已支持sock5，http两种代理协议。&quot; class=&quot;headerlink&quot; title=&quot;天朝的网络环境对技术人员实在是不友好，还好ShadowsocksX-NG已支持sock5，http两种代理协议。&quot;&gt;&lt;/a&gt;天朝的网络环境对技术人员实在是不友好，还好ShadowsocksX-NG已支持sock5，http两种代理协议。&lt;/h4&gt;&lt;h4 id=&quot;设置终端代理&quot;&gt;&lt;a href=&quot;#设置终端代理&quot; class=&quot;headerlink&quot; title=&quot;设置终端代理&quot;&gt;&lt;/a&gt;设置终端代理&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在 .bashrc 或 .zshrc 中设置如下内容&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#sock代理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias setproxy=&amp;quot;export ALL_PROXY=socks5://127.0.0.1:1080&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias unsetproxy=&amp;quot;unset ALL_PROXY&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#http代理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias setproxy=&amp;quot;export ALL_PROXY=http://127.0.0.1:8035&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias unsetproxy=&amp;quot;unset ALL_PROXY&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#测试&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl ip.cn&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux NFS挂载失败两种异常处理</title>
    <link href="http://messay.me/2018/05/20/linux-NFS%E6%8C%82%E8%BD%BD%E5%A4%B1%E8%B4%A5%E4%B8%A4%E7%A7%8D%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://messay.me/2018/05/20/linux-NFS挂载失败两种异常处理/</id>
    <published>2018-05-19T16:02:40.000Z</published>
    <updated>2020-05-17T14:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最近在研究kubernetes，测试使用NFS作为k8s的文件系统。部署过程中的问题，归纳一下。"><a href="#最近在研究kubernetes，测试使用NFS作为k8s的文件系统。部署过程中的问题，归纳一下。" class="headerlink" title="最近在研究kubernetes，测试使用NFS作为k8s的文件系统。部署过程中的问题，归纳一下。"></a>最近在研究kubernetes，测试使用NFS作为k8s的文件系统。部署过程中的问题，归纳一下。</h4><ul><li>报错‘clnt_create: RPC: Program not registered’，解决如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 请按顺序执行</span><br><span class="line">systemctl stop rpcbind</span><br><span class="line">systemctl stop nfs</span><br><span class="line">systemctl start rpcbind</span><br><span class="line">systemctl start nfs</span><br><span class="line">systemctl status rpcbind &amp;&amp; systemctl status nfs</span><br><span class="line"></span><br><span class="line">#测试</span><br><span class="line">mount -t nfs 192.168.7.13:/datadir /mnt</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>报错‘mount.nfs: access denied’，解决如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 保证挂载client节点ip在server配置指定的网段内</span><br><span class="line">cat /etc/exports</span><br><span class="line">/dirdata 192.168.7.0/24(rw,no_root_squash,sync)</span><br><span class="line"># 如果指定的是192.168.7.0/24，那么client的ip也需要在这个网段内</span><br><span class="line"></span><br><span class="line">#测试</span><br><span class="line">mount -t nfs 192.168.7.13:/datadir /mnt</span><br></pre></td></tr></table></figure></li></ul><h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><ul><li><a href="https://juejin.im/post/5a615fef518825545d75d8c3" target="_blank" rel="noopener">NFS-mount 如何进行跨服务器文件挂载</a></li><li><a href="http://blog.51cto.com/sxct168/1654069" target="_blank" rel="noopener">nfs实验错误提示clnt_create: RPC: Program not registered</a></li><li><a href="https://blog.csdn.net/HW_LiBo/article/details/39521849" target="_blank" rel="noopener">SuSE linux NFS挂载失败案例处理：mount.nfs: access denied</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;最近在研究kubernetes，测试使用NFS作为k8s的文件系统。部署过程中的问题，归纳一下。&quot;&gt;&lt;a href=&quot;#最近在研究kubernetes，测试使用NFS作为k8s的文件系统。部署过程中的问题，归纳一下。&quot; class=&quot;headerlink&quot; title=&quot;最近在研究kubernetes，测试使用NFS作为k8s的文件系统。部署过程中的问题，归纳一下。&quot;&gt;&lt;/a&gt;最近在研究kubernetes，测试使用NFS作为k8s的文件系统。部署过程中的问题，归纳一下。&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;报错‘clnt_create: RPC: Program not registered’，解决如下：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 请按顺序执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl stop rpcbind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl stop nfs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl start rpcbind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl start nfs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl status rpcbind &amp;amp;&amp;amp; systemctl status nfs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#测试&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mount -t nfs 192.168.7.13:/datadir /mnt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cassandra建表异常处理</title>
    <link href="http://messay.me/2018/03/08/cassandra%E5%BB%BA%E8%A1%A8%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://messay.me/2018/03/08/cassandra建表异常处理/</id>
    <published>2018-03-08T13:03:16.000Z</published>
    <updated>2020-05-17T14:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="今天需要在cassandra建立一个新表用作英文spu匹配，报错如下："><a href="#今天需要在cassandra建立一个新表用作英文spu匹配，报错如下：" class="headerlink" title="今天需要在cassandra建立一个新表用作英文spu匹配，报错如下："></a>今天需要在cassandra建立一个新表用作英文spu匹配，报错如下：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Warning: schema version mismatch detected, which might be caused by DOWN nodes; </span><br><span class="line">if this is not the case, check the schema versions of your nodes in system.local and system.peers. </span><br><span class="line">OperationTimedOut: errors=&#123;&#125;, last_host=host</span><br></pre></td></tr></table></figure><h5 id="初步判断应该是cassandra节点数据异常，使用nodetool工具修复之，再次建表无异常。"><a href="#初步判断应该是cassandra节点数据异常，使用nodetool工具修复之，再次建表无异常。" class="headerlink" title="初步判断应该是cassandra节点数据异常，使用nodetool工具修复之，再次建表无异常。"></a>初步判断应该是cassandra节点数据异常，使用nodetool工具修复之，再次建表无异常。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nodetool repair</span><br></pre></td></tr></table></figure><div class="tip">cassandra还是建议定时repair，防止出现数据异常.</div><a id="more"></a><h5 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h5><ul><li><a href="https://stackoverflow.com/questions/38891563/cassandra-every-command-issued-in-cqlsh-throws-errors" target="_blank" rel="noopener">Cassandra - Every command issued in CQLSH throws errors</a></li><li><a href="https://docs.datastax.com/en/cassandra/2.1/cassandra/tools/toolsRepair.html" target="_blank" rel="noopener">nodetool repair</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;今天需要在cassandra建立一个新表用作英文spu匹配，报错如下：&quot;&gt;&lt;a href=&quot;#今天需要在cassandra建立一个新表用作英文spu匹配，报错如下：&quot; class=&quot;headerlink&quot; title=&quot;今天需要在cassandra建立一个新表用作英文spu匹配，报错如下：&quot;&gt;&lt;/a&gt;今天需要在cassandra建立一个新表用作英文spu匹配，报错如下：&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Warning: schema version mismatch detected, which might be caused by DOWN nodes; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if this is not the case, check the schema versions of your nodes in system.local and system.peers. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OperationTimedOut: errors=&amp;#123;&amp;#125;, last_host=host&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;初步判断应该是cassandra节点数据异常，使用nodetool工具修复之，再次建表无异常。&quot;&gt;&lt;a href=&quot;#初步判断应该是cassandra节点数据异常，使用nodetool工具修复之，再次建表无异常。&quot; class=&quot;headerlink&quot; title=&quot;初步判断应该是cassandra节点数据异常，使用nodetool工具修复之，再次建表无异常。&quot;&gt;&lt;/a&gt;初步判断应该是cassandra节点数据异常，使用nodetool工具修复之，再次建表无异常。&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./nodetool repair&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;div class=&quot;tip&quot;&gt;cassandra还是建议定时repair，防止出现数据异常.&lt;/div&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用百度翻译API翻译数据示例</title>
    <link href="http://messay.me/2018/03/02/%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91API%E7%BF%BB%E8%AF%91%E6%95%B0%E6%8D%AE%E7%A4%BA%E4%BE%8B/"/>
    <id>http://messay.me/2018/03/02/使用百度翻译API翻译数据示例/</id>
    <published>2018-03-02T14:10:15.000Z</published>
    <updated>2020-05-17T14:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="公司使用电商分析平台需要英文版，商品spu数据需要翻译。调研几个平台的翻译API：有道，google，百度，最后选择百度（并不是因为百度翻译的好，而是百度不要钱！）"><a href="#公司使用电商分析平台需要英文版，商品spu数据需要翻译。调研几个平台的翻译API：有道，google，百度，最后选择百度（并不是因为百度翻译的好，而是百度不要钱！）" class="headerlink" title="公司使用电商分析平台需要英文版，商品spu数据需要翻译。调研几个平台的翻译API：有道，google，百度，最后选择百度（并不是因为百度翻译的好，而是百度不要钱！）"></a>公司使用电商分析平台需要英文版，商品spu数据需要翻译。调研几个平台的翻译API：有道，google，百度，最后选择百度（并不是因为百度翻译的好，而是百度不要钱！）</h5><h5 id="示例代码如下："><a href="#示例代码如下：" class="headerlink" title="示例代码如下："></a>示例代码如下：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> httplib</span><br><span class="line"><span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">appid = <span class="string">''</span> </span><br><span class="line">secretKey = <span class="string">''</span></span><br><span class="line">httpClient = <span class="literal">None</span></span><br><span class="line">fromLang = <span class="string">'zh'</span></span><br><span class="line">toLang = <span class="string">'en'</span></span><br><span class="line"></span><br><span class="line">infos = [] <span class="comment"># 待翻译</span></span><br><span class="line">results = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'w+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> infos:</span><br><span class="line">            myurl = <span class="string">'/api/trans/vip/translate'</span></span><br><span class="line">            q = info.strip()</span><br><span class="line">            salt = random.randint(<span class="number">32768</span>, <span class="number">65536</span>)</span><br><span class="line">            sign = appid+q+str(salt)+secretKey</span><br><span class="line">            m1 = md5.new()</span><br><span class="line">            m1.update(sign)</span><br><span class="line">            sign = m1.hexdigest()</span><br><span class="line">            myurl = myurl+<span class="string">'?appid='</span>+appid+<span class="string">'&amp;q='</span>+urllib.quote(q)+<span class="string">'&amp;from='</span>+fromLang+<span class="string">'&amp;to='</span>+toLang+<span class="string">'&amp;salt='</span>+str(salt)+<span class="string">'&amp;sign='</span>+sign</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                httpClient = httplib.HTTPConnection(<span class="string">'api.fanyi.baidu.com'</span>)</span><br><span class="line">                httpClient.request(<span class="string">'GET'</span>, myurl)</span><br><span class="line">                response = httpClient.getresponse()</span><br><span class="line">                result = json.loads(response.read())[<span class="string">'trans_result'</span>][<span class="number">0</span>][<span class="string">'dst'</span>].encode(<span class="string">'utf-8'</span>)</span><br><span class="line">                results[<span class="string">"data"</span>] = result</span><br><span class="line">                line = json.dumps(results)</span><br><span class="line">                f.write(line + <span class="string">'\n'</span>)</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> num % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">                    print(<span class="string">'success &#123;&#125;'</span>.format(num))</span><br><span class="line">            <span class="keyword">except</span> Exception, e:</span><br><span class="line">                <span class="keyword">print</span> e</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                <span class="keyword">if</span> httpClient:</span><br><span class="line">                    httpClient.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    filename = <span class="string">'trans.json'</span></span><br><span class="line">    make_file(filename)</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="翻译质量并不算高，而且没办法保持翻译之前的数据分割格式。不要钱，凑合着用吧。"><a href="#翻译质量并不算高，而且没办法保持翻译之前的数据分割格式。不要钱，凑合着用吧。" class="headerlink" title="翻译质量并不算高，而且没办法保持翻译之前的数据分割格式。不要钱，凑合着用吧。"></a>翻译质量并不算高，而且没办法保持翻译之前的数据分割格式。不要钱，凑合着用吧。</h5><h5 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h5><ul><li><a href="https://fanyi-api.baidu.com/api/trans/product/apidoc" target="_blank" rel="noopener">百度通用翻译API技术文档</a></li><li><a href="https://github.com/lovebaicai/SmallScript/blob/master/baidu_trans.py" target="_blank" rel="noopener">脚本下载</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;公司使用电商分析平台需要英文版，商品spu数据需要翻译。调研几个平台的翻译API：有道，google，百度，最后选择百度（并不是因为百度翻译的好，而是百度不要钱！）&quot;&gt;&lt;a href=&quot;#公司使用电商分析平台需要英文版，商品spu数据需要翻译。调研几个平台的翻译API：有道，google，百度，最后选择百度（并不是因为百度翻译的好，而是百度不要钱！）&quot; class=&quot;headerlink&quot; title=&quot;公司使用电商分析平台需要英文版，商品spu数据需要翻译。调研几个平台的翻译API：有道，google，百度，最后选择百度（并不是因为百度翻译的好，而是百度不要钱！）&quot;&gt;&lt;/a&gt;公司使用电商分析平台需要英文版，商品spu数据需要翻译。调研几个平台的翻译API：有道，google，百度，最后选择百度（并不是因为百度翻译的好，而是百度不要钱！）&lt;/h5&gt;&lt;h5 id=&quot;示例代码如下：&quot;&gt;&lt;a href=&quot;#示例代码如下：&quot; class=&quot;headerlink&quot; title=&quot;示例代码如下：&quot;&gt;&lt;/a&gt;示例代码如下：&lt;/h5&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#/usr/bin/env python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding:utf-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; httplib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; md5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; urllib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; random&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;appid = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;secretKey = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;httpClient = &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fromLang = &lt;span class=&quot;string&quot;&gt;&#39;zh&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toLang = &lt;span class=&quot;string&quot;&gt;&#39;en&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;infos = [] &lt;span class=&quot;comment&quot;&gt;# 待翻译&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;results = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;make_file&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(filename)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(filename, &lt;span class=&quot;string&quot;&gt;&#39;w+&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; info &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; infos:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            myurl = &lt;span class=&quot;string&quot;&gt;&#39;/api/trans/vip/translate&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            q = info.strip()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            salt = random.randint(&lt;span class=&quot;number&quot;&gt;32768&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;65536&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sign = appid+q+str(salt)+secretKey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            m1 = md5.new()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            m1.update(sign)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sign = m1.hexdigest()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            myurl = myurl+&lt;span class=&quot;string&quot;&gt;&#39;?appid=&#39;&lt;/span&gt;+appid+&lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;q=&#39;&lt;/span&gt;+urllib.quote(q)+&lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;from=&#39;&lt;/span&gt;+fromLang+&lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;to=&#39;&lt;/span&gt;+toLang+&lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;salt=&#39;&lt;/span&gt;+str(salt)+&lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;sign=&#39;&lt;/span&gt;+sign&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                httpClient = httplib.HTTPConnection(&lt;span class=&quot;string&quot;&gt;&#39;api.fanyi.baidu.com&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                httpClient.request(&lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;, myurl)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                response = httpClient.getresponse()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result = json.loads(response.read())[&lt;span class=&quot;string&quot;&gt;&#39;trans_result&#39;&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;dst&#39;&lt;/span&gt;].encode(&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                results[&lt;span class=&quot;string&quot;&gt;&quot;data&quot;&lt;/span&gt;] = result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                line = json.dumps(results)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                f.write(line + &lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                num += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; num % &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    print(&lt;span class=&quot;string&quot;&gt;&#39;success &amp;#123;&amp;#125;&#39;&lt;/span&gt;.format(num))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; Exception, e:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; httpClient:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    httpClient.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filename = &lt;span class=&quot;string&quot;&gt;&#39;trans.json&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make_file(filename)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>二分查找和常用排序Python实现</title>
    <link href="http://messay.me/2018/02/25/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8FPython%E5%AE%9E%E7%8E%B0/"/>
    <id>http://messay.me/2018/02/25/二分查找和常用排序Python实现/</id>
    <published>2018-02-25T14:52:20.000Z</published>
    <updated>2020-05-17T14:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="明白查找和排序基本原理，但是一直手写不出来。手打一遍，帮助记忆。"><a href="#明白查找和排序基本原理，但是一直手写不出来。手打一遍，帮助记忆。" class="headerlink" title="明白查找和排序基本原理，但是一直手写不出来。手打一遍，帮助记忆。"></a>明白查找和排序基本原理，但是一直手写不出来。手打一遍，帮助记忆。</h5><ul><li>二分查找：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># author: nemo_chen</span></span><br><span class="line"><span class="comment"># 二分查找Python实现</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(arr, key)</span>:</span></span><br><span class="line">    start = arr[<span class="number">0</span>]</span><br><span class="line">    end = arr[<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">while</span> start &lt;= end:</span><br><span class="line">        mid = start + (end - start) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> arr[mid] &gt; key:</span><br><span class="line">            start = mid <span class="number">-1</span></span><br><span class="line">        <span class="keyword">elif</span> arr[mid] &lt; key:</span><br><span class="line">            start = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>常用排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># author: nemo_chen</span></span><br><span class="line"><span class="comment"># 几种常用排序Python实现</span></span><br><span class="line"><span class="comment"># http://blog.csdn.net/mrlevo520/article/details/77829204</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 冒泡</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    l = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(l):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(l<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>]:</span><br><span class="line">                arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择</span></span><br><span class="line"><span class="comment"># method one:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    l = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(l):</span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, l):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[min_index]:</span><br><span class="line">                min_index = j</span><br><span class="line">        arr[i], arr[min_index] = arr[min_index], arr[j]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">    </span><br><span class="line"><span class="comment"># method two:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    l = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(l):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(l - i):</span><br><span class="line">            <span class="keyword">if</span> arr[i] &gt; arr[j+i]:</span><br><span class="line">                arr[i], arr[i+j] = arr[i+j], arr[i]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(arr) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        basic = arr[<span class="number">0</span>]</span><br><span class="line">        less = [i <span class="keyword">for</span> i <span class="keyword">in</span> arr[<span class="number">1</span>:] <span class="keyword">if</span> i &lt; basic]</span><br><span class="line">        more = [i <span class="keyword">for</span> i <span class="keyword">in</span> arr[<span class="number">1</span>:] <span class="keyword">if</span> i &gt; basic]</span><br><span class="line">        <span class="keyword">return</span> quickSort(less) + [basic] + quickSort(more)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    l = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, l):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">            <span class="keyword">if</span> arr[i] &lt; arr[j]:</span><br><span class="line">                arr.insert(j, arr[i])</span><br><span class="line">                arr.pop(i+<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 希尔</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shellSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    l = len(arr)</span><br><span class="line">    basic = l / <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> basic &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(basic, l):</span><br><span class="line">            temp = arr[i]</span><br><span class="line">            j = i</span><br><span class="line">            <span class="keyword">while</span> j &gt;= basic <span class="keyword">and</span> arr[j - basic] &gt; temp:</span><br><span class="line">                arr[j] = arr[j - basic]</span><br><span class="line">                j -= basic</span><br><span class="line">            arr[j] = temp</span><br><span class="line">        basic = basic / <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> left <span class="keyword">and</span> right:</span><br><span class="line">        result.append(left.pop(<span class="number">0</span>) <span class="keyword">if</span> left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>] <span class="keyword">else</span> right.pop(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">while</span> left:</span><br><span class="line">        result.append(left.pop(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">while</span> right:</span><br><span class="line">        result.append(right.pop(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(arr) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    mid_index = len(arr) / <span class="number">2</span></span><br><span class="line">    left = mergeSort(arr[:mid_index])</span><br><span class="line">    right = mergeSort(arr[min_index:])</span><br><span class="line">    <span class="keyword">return</span> merge(left, right)</span><br></pre></td></tr></table></figure><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li><a href="http://blog.csdn.net/mrlevo520/article/details/77829204" target="_blank" rel="noopener">数据结构与算法-排序篇-Python描述</a></li><li><a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">排序算法(wiki)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;明白查找和排序基本原理，但是一直手写不出来。手打一遍，帮助记忆。&quot;&gt;&lt;a href=&quot;#明白查找和排序基本原理，但是一直手写不出来。手打一遍，帮助记忆。&quot; class=&quot;headerlink&quot; title=&quot;明白查找和排序基本原理，但是一直手写不出来。手打一遍，帮助记忆。&quot;&gt;&lt;/a&gt;明白查找和排序基本原理，但是一直手写不出来。手打一遍，帮助记忆。&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;二分查找：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env python3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# author: nemo_chen&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 二分查找Python实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;binary_search&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(arr, key)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    start = arr[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end = arr[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; start &amp;lt;= end:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mid = start + (end - start) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; arr[mid] &amp;gt; key:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            start = mid &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; arr[mid] &amp;lt; key:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            start = mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mid&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
